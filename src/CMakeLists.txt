if(WIN32)
	set(CMAKE_SHARED_LIBRARY_PREFIX "")
endif()

if(NOT DEFINED USE_QT)
    set(USE_QT 4)
endif(NOT DEFINED USE_QT)


if(MSVC)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
        set(CMAKE_CXX_FLAGS "-Zm300 -EHsc -GR -Y-")
        if(CMAKE_BUILD_TYPE MATCHES Debug)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -MDd -Zi")            
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -MD")
            add_definitions(-DQT_NO_DEBUG)
            add_definitions(-DNDEBUG)
        endif()
        if(${USE_QT} GREATER 4)
            # Qt5 uses MSVC's built-in wchar_t type
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Zc:wchar_t")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Zc:wchar_t-")
        endif()
else()
    if(NOT APPLE)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-undefined")
    endif(NOT APPLE)
endif(MSVC)

if(NOT CMAKE_BUILD_TYPE MATCHES Debug)
    add_definitions(-DNDEBUG)
    add_definitions(-DQT_NO_DEBUG)
endif(NOT CMAKE_BUILD_TYPE MATCHES Debug)

# clear default CMake RPATH values
set(CMAKE_SKIP_BUILD_RPATH  FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
set(CMAKE_INSTALL_RPATH "")

if(NOT MSVC)
    if(APPLE)
        set(CMAKE_CXX_FLAGS "-stdlib=libc++ -DAPPLE ${CMAKE_CXX_FLAGS}")
    else()
        set(CMAKE_CXX_FLAGS "-fno-exceptions -std=c++0x ${CMAKE_CXX_FLAGS}")
    endif()
    if(CMAKE_BUILD_TYPE MATCHES Debug)
        set(CMAKE_CXX_FLAGS "-Werror -Wreorder -Wreturn-type -Wno-error=unused-variable -Wno-error=unused-parameter -O0 ${CMAKE_CXX_FLAGS}")
    endif()
endif()

if(NOT APPLE AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libstdc++")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lstdc++")
    set(STDCXX_LIB "stdc++")
    set(STDMATH_LIB "m")
endif()

if(MSVC_IDE)
	#set(CMAKE_SHARED_LIBRARY_PREFIX "../")
	#set(CMAKE_IMPORT_LIBRARY_PREFIX "../")
endif()
if(XCODE)
	set(CMAKE_SHARED_LIBRARY_PREFIX "../lib")
	set(CMAKE_IMPORT_LIBRARY_PREFIX "../lib")
	
#	if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")
#		set(CMAKE_OSX_ARCHITECTURES x86_64)
#	else()
#		set(CMAKE_OSX_ARCHITECTURES i386)
#	endif()
	
endif(XCODE)


include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

file(GLOB THIRDPARTY_PACKAGES "${CMAKE_SOURCE_DIR}/src/3rdparty/*")
foreach(PACKAGE IN ITEMS ${THIRDPARTY_PACKAGES})
    if(EXISTS "${PACKAGE}/include")
        include_directories("${PACKAGE}/include")
    endif()
    if(EXISTS "${PACKAGE}/CMakeLists.txt")
        add_subdirectory("${PACKAGE}")
    endif()
endforeach(PACKAGE)


add_subdirectory(shared)
add_subdirectory(plugins)
#if (NOT WIN32)
    add_subdirectory(actors)
#endif()
add_subdirectory(app)
add_subdirectory(tools)
