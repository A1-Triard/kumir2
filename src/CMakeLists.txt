if(WIN32)
	set(CMAKE_SHARED_LIBRARY_PREFIX "")
endif()

if(MSVC)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
        if(CMAKE_BUILD_TYPE MATCHES Debug)
            set(CMAKE_CXX_FLAGS "-Zm300 -Zc:wchar_t- -EHsc -MDd -GR -Y- -Zi")
        else()
            set(CMAKE_CXX_FLAGS "-Zm300 -Zc:wchar_t- -EHsc -MD -GR -Y-")
        endif()
else()
    if(NOT APPLE)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-undefined")
    endif(NOT APPLE)
endif(MSVC)


# clear default CMake RPATH values
set(CMAKE_SKIP_BUILD_RPATH  FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
set(CMAKE_INSTALL_RPATH "")

if(NOT MSVC)
    if(APPLE)
        set(CMAKE_CXX_FLAGS "-stdlib=libc++ -DAPPLE ${CMAKE_CXX_FLAGS}")
    else()
        set(CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FLAGS}")
    endif()
    if(CMAKE_BUILD_TYPE MATCHES Debug)
        set(CMAKE_CXX_FLAGS "-Werror -Wreturn-type -O0 ${CMAKE_CXX_FLAGS}")
    endif()
endif()

if(NOT APPLE AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libstdc++")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lstdc++")
    set(STDCXX_LIB "stdc++")
    set(STDMATH_LIB "m")
endif()

if(MSVC_IDE)
	#set(CMAKE_SHARED_LIBRARY_PREFIX "../")
	#set(CMAKE_IMPORT_LIBRARY_PREFIX "../")
endif()
if(XCODE)
	set(CMAKE_SHARED_LIBRARY_PREFIX "../lib")
	set(CMAKE_IMPORT_LIBRARY_PREFIX "../lib")
	
#	if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64")
#		set(CMAKE_OSX_ARCHITECTURES x86_64)
#	else()
#		set(CMAKE_OSX_ARCHITECTURES i386)
#	endif()
	
endif(XCODE)


include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

add_subdirectory(shared)
add_subdirectory(plugins)
#if (NOT WIN32)
    add_subdirectory(actors)
#endif()
add_subdirectory(app)
add_subdirectory(tools)
