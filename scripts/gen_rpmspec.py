#!/usr/bin/env python

QT_MIN_VERSION = "4.6.3"
GROUP = "Productivity/Scientific/Other"
PACKAGER = None
VENDOR = "NIISI RAS"
RELEASE = "1"

import project_spider
import sys
import os.path

def print_usage_and_exit(errcode):
    sys.stderr.write("Usage: \n")
    sys.stderr.write("   "+sys.argv[0]+" --packager=\"Your Name <your@e.mail>\" [--out=outfile] [--release=relno] [--all-in-one]\n")
    sys.exit(errcode)

if __name__=="__main__":
    proj_root, scriptname = os.path.split(sys.argv[0])
    proj_root += "/.."
    proj_root = os.path.abspath(proj_root)
    proj = project_spider.scan_project(proj_root)
    out = sys.stdout
    all_in_one = False
    for arg in sys.argv:
        if arg.startswith("--help") or arg.startswith("-h"):
            print_usage_and_exit(0)
        elif arg.startswith("--packager="):
            PACKAGER = arg[11:]
        elif arg.startswith("--out="):
            out = open(arg[6:], 'w')
        elif arg.startswith("--release="):
            RELEASE = arg[10:]
        elif arg.startswith("--all-in-one"):
            proj.mergeIntoAllInOnePackage()
            all_in_one = True
    if PACKAGER is None:
        print_usage_and_exit(1)
    out.write("""# norootforbuild

# Do not edit!
# This file generated by "scripts/gen_rpm.py" and will be overwritten
%if 0%{?opensuse_bs}
%define is_fedora %{defined fedora}
%else
%define is_fedora %(if [ -f /etc/redhat-release ] ; then echo -n 1 ; else echo -n 0 ; fi)
%endif
Name:    kumir2
Summary:    Kumir education system
License:    GPL2+
BuildRequires:     python
BuildRequires:     ant
BuildRequires:     java-1.6.0-openjdk-devel
BuildRequires:     gwt >= 2.3.0
BuildRequires:     gcc-c++ >= 4
""")
    out.write("%if %{is_fedora}\n")
    out.write("BuildRequires:     qt-devel >= "+QT_MIN_VERSION+"\n")
    out.write("%else\n")
    out.write("BuildRequires:     libqt4-devel >= "+QT_MIN_VERSION+"\n")
    out.write("%endif\n")
    out.write("Group:\t"+GROUP+"\n")
    out.write("Version:\t"+proj.version)
    if len(proj.version_extra)>0:
        out.write("+"+proj.version_extra)
    out.write("\n")
    out.write("Release:\t"+RELEASE+"\n")
    out.write("BuildRoot:\t%{_tmppath}/%{name}-%{version}\n")
    out.write("%if %{defined otherdist}\n")
    out.write("BuildRequires:\t libqt4-devel >= "+QT_MIN_VERSION+"\n")
    out.write("%endif\n")
    out.write("%if %{defined fedoradist}\n")
    out.write("BuildRequires:\t qt4-devel >= "+QT_MIN_VERSION+"\n")
    out.write("%endif\n")
    out.write("BuildRequires:\t python\n")
    out.write("BuildRequires:\t ant\n")
    out.write("BuildRequires:\t java-1.6.0-openjdk-devel\n")
    out.write("BuildRequires:\t gwt >= 2.3.0\n")
    out.write("BuildRequires:\t gcc-c++ >= 4\n")
    if all_in_one:
        item = proj.components[""]
        out.write("%{is_fedora}\n")
        out.write("Requires:\t qt4 >= "+QT_MIN_VERSION+"\n")
        out.write("%else\n")
        out.write("Requires:\t libqt4 >= "+QT_MIN_VERSION+"\n")
        out.write("%endif")
        if len(item.icons)>0:
            out.write("Requires:\t/usr/bin/gtk-update-icon-cache\n")
        for qt in item.requires_qt:
            out.write("Requires:\tlib"+qt+".so.4\n")
        for req in item.requires_other:
            out.write("Requires:\t"+req+"\n")

    qtReqs = set()
    
    for name, item in proj.components.items():
        qt_req = item.requires_qt
        for req in qt_req:
            qtReqs.add("pkgconfig("+req+")")
    
    for qt_req in qtReqs:
        out.write("BuildRequires:\t"+qt_req+"\n")
    
    out.write("Vendor:\t"+VENDOR+"\n")
    out.write("Packager:\t"+PACKAGER+"\n")
    out.write("Source:\t%{name}-"+proj.version)
    if len(proj.version_extra)>0:
        out.write("."+proj.version_extra)
    out.write(".tar.gz\n")
    out.write("URL:\thttp://www.niisi.ru/kumir/\n")
    out.write("%if 0%{?opensuse_bs}\n")
    out.write("BuildRequires:\t-post-build-checks -rpmlint-Factory\n")
    out.write("%endif\n")
    out.write("%description\nSecond generation of well-known Kumir system\n\n")
    out.write("%prep\n%setup -q -n %{name}-"+proj.version)
    if len(proj.version_extra)>0:
        out.write("."+proj.version_extra)
    out.write("\n\n")
    out.write("%build\n")
    out.write("""
    if [ -f /usr/bin/qmake-qt4 ]
    then
        qmake-qt4
    else
        qmake
    fi
    """)
    out.write("make\n")
    
    for name, item in proj.components.items():
        for cmd in item.buildcmds:
            out.write(cmd+"\n")
        
    out.write("\n%install\n")
    out.write("make INSTALL_ROOT=$RPM_BUILD_ROOT/%{_prefix} install\n")
    
    for name, item in proj.components.items():
        for cmd in item.installcmds:
            cmd = cmd.replace("%datadir%", "$RPM_BUILD_ROOT/%{_datadir}")
            cmd = cmd.replace("%bindir%", "$RPM_BUILD_ROOT/%{_bindir}")
            cmd = cmd.replace("%libdir%", "$RPM_BUILD_ROOT/%{_libdir}")
            out.write(cmd+"\n")
    
    out.write("\n%clean\nrm -rf $RPM_BUILD_ROOT\n\n")
    
    for name, item in proj.components.items():
        if not all_in_one:
            out.write("\n%package\t"+name+"\n")
            out.write("Summary:\t"+item.summary["en"]+"\n")
            out.write("Group:\t"+GROUP+"\n")

            out.write("%{is_fedora}\n")
            out.write("Requires:\t qt4 >= "+QT_MIN_VERSION+"\n")
            out.write("%else\n")
            out.write("Requires:\t libqt4 >= "+QT_MIN_VERSION+"\n")
            out.write("%endif")
            
            if item.isweb:
                out.write("Requires:\tkumir2-module-Browser\n")
                out.write("BuildArch:\tnoarch\n")
            if len(item.icons)>0:
                out.write("Requires:\t/usr/bin/gtk-update-icon-cache\n")
            for qt in item.requires_qt:
                out.write("Requires:\tlib"+qt+".so.4\n")
            for mod in item.requires_kumir2:
                out.write("Requires:\tkumir2-module-"+mod+" = "+proj.version)
                if len(proj.version_extra)>0:
                    out.write("+"+proj.version_extra)
                    out.write("\n")
            for lib in item.requires_libs:
                provider = proj.findLibraryProvider(lib)
                if (provider):
                    out.write("Requires:\tkumir2-"+provider+" = "+proj.version)
                    if len(proj.version_extra)>0:
                        out.write("+"+proj.version_extra)
                else:
                    out.write("Requires:\tlib"+lib+".so")
                out.write("\n")
            
            for web in item.requires_web:
                provider = proj.findWebAppProvider(web)
                if (provider):
                    out.write("Requires:\tkumir2-"+provider+" = "+proj.version)
                    if len(proj.version_extra)>0:
                        out.write("+"+proj.version_extra)
                    out.write("\n")
            
            for req in item.requires_other:
                out.write("Requires:\t"+req+"\n")
        
        if item.description.has_key("en"):
            out.write("\n\n%description "+name+"\n"+item.description["en"]+"\n\n")
        else:
            out.write("\n\n%description "+name+"\n\n")
        out.write("%files "+name+"\n")
        out.write("%defattr(-,root,root)\n")
        if len(item.libs)>0:
            out.write("%dir %{_libdir}/kumir2\n")
        if len(item.plugins)>0:
            out.write("%dir %{_libdir}/kumir2/plugins\n")
        if len(item.bins)>0:
            out.write("%dir %{_bindir}\n")
        for dir in item.dirs:
            dir = dir.replace("%datadir%", "%{_datadir}")
            dir = dir.replace("%bindir%", "%{_bindir}")
            dir = dir.replace("%libdir%", "%{_libdir}")
            out.write("%dir "+dir+"\n")
        for file in item.filesmasks:
            file = file.replace("%datadir%", "%{_datadir}")
            file = file.replace("%bindir%", "%{_bindir}")
            file = file.replace("%libdir%", "%{_libdir}")
            out.write(file+"\n")
        for lib in item.libs:
            out.write("%{_libdir}/kumir2/lib"+lib+".so*\n")
        for plugin in item.plugins:
            out.write("%{_libdir}/kumir2/plugins/lib"+plugin+".so\n")
            out.write("%{_libdir}/kumir2/plugins/"+plugin+".pluginspec\n")
        ldconfig = ""
        if len(item.libs)>0:
            ldconfig = "-p /sbin/ldconfig"
        icon_cache = ""
        if len(item.icons)>0:
            icon_cache = "gtk-update-icon-cache --quiet --force \"hicolor\" || true"
        if len(ldconfig)+len(icon_cache)>0:
            out.write("\n%post "+name+" "+ldconfig+"\n"+icon_cache+"\n")
            out.write("%postun "+name+" "+ldconfig+"\n"+icon_cache+"\n")
        
    WEEKDAYS = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
    MONTH = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    
    out.write("\n\n%changelog\n")
    changelog_en = proj.changelogs["en"]
    for entry in changelog_en:
        out.write("* "+WEEKDAYS[entry.date.weekday()]+
                                " "+MONTH[entry.date.month-1]+
                                " "+str(entry.date.day)+
                                " "+str(entry.date.year)+
                                " - Kumir Team <kumir@lpm.org.ru>\n")
        out.write(entry.contents)
        if not entry.contents.endswith("\n"):
            out.write("\n")
        out.write("\n")
    out.close()
