ТО -> иначе ФРАГМЕНТ_АЛГОРИТМА* все : { 
   processCorrectThenIfNotExists2();
   processCorrectElse(); 
   setCurrentError("No 'then' before else..fi"); 
   appendSimpleLine();
} { 
   processCorrectFi(); 
}

ФРАГМЕНТ_АЛГОРИТМА* -> алг : { setCurrentError("Algorhitm header in algorhitm body"); appendSimpleLine(); }
ФРАГМЕНТ_АЛГОРИТМА* -> нач : { setCurrentError("Begin in algorhitm body"); appendSimpleLine(); }
ФРАГМЕНТ_АЛГОРИТМА* -> исп : { setCurrentError("Module in algorhitm body"); appendSimpleLine(); }
ФРАГМЕНТ_АЛГОРИТМА* -> кон_исп : { setCurrentError("End module in algorhitm body"); appendSimpleLine(); }

ЛИШНИЙ_НАЧ_У_ИСПОЛНИТЕЛЯ -> нач : { setCurrentError("Extra 'begin'"); appendSimpleLine(); }

КОНЕЦ_ИСПОЛНИТЕЛЯ -> end : { setModuleBeginError("No paired 'end module'"); }

ИСПОЛНИТЕЛЬ* -> алг МУСОР_МЕЖДУ_АЛГ_НАЧ ДОКУМЕНТАЦИЯ ДАНО_НАДО ТЕЛО_АЛГОРИТМА : { 
    
    processCorrectAlgHeader(); 
}

#АЛГОРИТМ* -> если МУСОР_МЕЖДУ_ЕСЛИ_ТО ТО : { setCurrentError("Garbage after 'if' statement"); processCorrectIf(); }
#АЛГОРИТМ* -> выбор МУСОР_МЕЖДУ_ВЫБОР_ПРИ при ФРАГМЕНТ_АЛГОРИТМА* ПРИ* ИНАЧЕ_ВСЕ : { setCurrentError("Garbage after 'switch' statement"); processCorrectSwitch(); } { processCorrectCase(); }
АЛГОРИТМ* -> алг ФРАГМЕНТ_АЛГОРИТМА* КОНЕЦ_АЛГОРИТМА : { 
    setCurrentError("No 'begin' after header"); 
    setCurrentIndentRank(0, +1);  
    processCorrectAlgHeader(); 
    processCorrectAlgBegin();
}

ФРАГМЕНТ_АЛГОРИТМА* -> алг нач ФРАГМЕНТ_АЛГОРИТМА* кон : {
  setCurrentError("Inner algorhitm"); 
  appendSimpleLine();
} {
  setCurrentError("Inner algorhitm");
  appendSimpleLine();
} {
  setCurrentError("Inner algorhitm");
  appendSimpleLine();
}
