# ====================== Фрагмент алгоритма
[0] ФРАГМЕНТ_АЛГОРИТМА* -> простое_предложение : { appendSimpleLine(); }
[0] ФРАГМЕНТ_АЛГОРИТМА* -> УСЛОВИЕ      # если то ... [иначе ...] все
[0] ФРАГМЕНТ_АЛГОРИТМА* -> ВЫБОР        # выбор при ... [при ...] [иначе ...] все
[0] ФРАГМЕНТ_АЛГОРИТМА* -> ЦИКЛ         # нц ... кц

[50] ФРАГМЕНТ_АЛГОРИТМА* -> алг : {     # ошибка -- ругаемся
    setCurrentError("Algorhitm header in algorhitm body"); 
    appendSimpleLine();
}

[50] ФРАГМЕНТ_АЛГОРИТМА* -> нач : {     # ошибка -- ругаемся
    setCurrentError("Begin in algorhitm body"); 
    appendSimpleLine();
}

# алгоритм целиком в качестве ФРАГМЕНТ_АЛГОРИТМА
[25] ФРАГМЕНТ_АЛГОРИТМА* -> алг нач ДОКУМЕНТАЦИЯ* ДАНО_НАДО* ФРАГМЕНТ_АЛГОРИТМА* кон : {
    setCurrentError("Inner algorithm");
    setCurrentIndentRank(0, +1);
    appendSimpleLine();
} {
    setCurrentError("Inner algorithm");
    setCurrentIndentRank(-1, +1);
    appendSimpleLine();
} {
    setCurrentError("Inner algorithm");
    setCurrentIndentRank(-1, 0)
    appendSimpleLine();
}

[91] ФРАГМЕНТ_АЛГОРИТМА* -> все : { setExtraCloseKeywordError("все"); }
[91] ФРАГМЕНТ_АЛГОРИТМА* -> кц : { setExtraCloseKeywordError("кц"); }
[91] ФРАГМЕНТ_АЛГОРИТМА* -> иначе : { setExtraCloseKeywordError("иначе"); }
[91] ФРАГМЕНТ_АЛГОРИТМА* -> ограничение_алгоритма : { setExtraCloseKeywordError("ограничение_алгоритма"); }
[91] ФРАГМЕНТ_АЛГОРИТМА* -> строка_документации : { setExtraCloseKeywordError("строка_документации"); }
[91] ФРАГМЕНТ_АЛГОРИТМА* -> при : { setExtraCloseKeywordError("при"); }
[91] ФРАГМЕНТ_АЛГОРИТМА* -> то : { setExtraCloseKeywordError("то"); }
[91] ФРАГМЕНТ_АЛГОРИТМА* -> использовать : { setCurrentError("Misplaced import"); appendSimpleLine(); } 



# --- условие

[0] УСЛОВИЕ -> если МУСОР_ЕСЛИ_ТО* ТО_ИНАЧЕ_ВСЕ : {
    # Добавляем в стек разбора указатель на тело
    # конструкции "если то ... [иначе ...] все"
    processCorrectIf();
} 

[11] УСЛОВИЕ -> если \           # недописанная конструкция "если"
: { 
    # Ругаемся
    setExtraOpenKeywordError("если");
    # Предлагаем текстовому редактору дописать конструкцию:
    #  -- дописать то\n\nвсе, затем переместить курсор на 1 строку вверх
    suggest("то\n\nвсе", 1);
}

[0]  ТО_ИНАЧЕ_ВСЕ -> то ФРАГМЕНТ_АЛГОРИТМА* ИНАЧЕ_ВСЕ : {
    # Инициализирует тело конструкции "если то ... "
    processCorrectThen();
}

[11] ТО_ИНАЧЕ_ВСЕ -> то : {      # недописанная конструкция "если то"
    # Ругаемся
    setExtraOpenKeywordError("то");
    # Предлагаем текстовому редактору дописать конструкцию:
    #  -- дописать \nвсе, затем переместить курсор на 1 строку вверх
    suggest("\nвсе", 1);
    # Ругаемся на "если"
    setCorrespondingIfBroken();
}

[20] ТО_ИНАЧЕ_ВСЕ -> иначе \     # пропущен "то" между "если ... иначе"
                     ФРАГМЕНТ_АЛГОРИТМА* \
                     все \
: {
    # Отрабатывает dummy конструкцию "то"
    processCorrectThenIfNotExists2();
    
    # Добавить тело конструкции "иначе ... все"
    processCorrectElse(); 

    # Ругаемся 
    setCurrentError("No 'then' before else..fi"); 

    # Добавляем ошибочную строку в программу
    appendSimpleLine();
} { 
    processCorrectFi(); 
}

[0]  МУСОР_ЕСЛИ_ТО* -> 0         # в корректной программе его быть не должно
[50]  МУСОР_ЕСЛИ_ТО* -> !то \     # ожидается "то", а встретилось что-то другое
                       МУСОР_ЕСЛИ_ТО* \ # таких строк мож 
: {
    setGarbageIfThenError();
}

[0] ИНАЧЕ_ВСЕ -> все : {
    # Вытаскиваем из стека разбора указатель на тело
    # конструкции "если то ... все" или
    # конструкции "выбор при ... все"
    processCorrectFi();
}

[0] ИНАЧЕ_ВСЕ -> иначе ФРАГМЕНТ_АЛГОРИТМА* все : {
    # Инициализируем тело конструкции "иначе ... все"
    processCorrectElse();
} {
    # Вытаскиваем из стека разбора указатель на тело
    # конструкции "если то ... все" или
    # конструкции "выбор при ... все"
    processCorrectFi();
}

[10] ИНАЧЕ_ВСЕ -> иначе : {     # недописанная конструкция "иначе"
    # Ругаемся
    setExtraOpenKeywordError("иначе");
    # Предлагаем текстовому редактору дописать конструкцию:
    #  -- дописать \nвсе, затем переместить курсор на 1 строку вверх
    suggest("\nвсе", 1);
    # Ругаемся на "если"
    setCorrespondingIfBroken();
}

# --- выбор

[0] ВЫБОР -> выбор \            
        МУСОР_ВЫБОР_ПРИ* \      
        при \                   # конструкции "выбор" должен быть хотя бы один "при"
        ФРАГМЕНТ_АЛГОРИТМА* \
        ПРИ* \                  # возможные последующие конструкции "при"
        ФРАГМЕНТ_АЛГОРИТМА* \
        ИНАЧЕ_ВСЕ \             # возможная конструкция "иначе...все", как для ЕСЛИ
: {
    processCorrectSwitch();
} {
    processCorrectCase();
}

[0] МУСОР_ВЫБОР_ПРИ* -> 0       # в корректной программе его быть не должно
[50] МУСОР_ВЫБОР_ПРИ* -> !при \  # ожидается "при", но встретилось что-то другое
: {
    setGarbageSwitchCaseError();
}  

[9] ВЫБОР -> выбор ИНАЧЕ_ВСЕ : {
    # Ошибка: нет ни одного "при".
    setCurrentError("No one 'case'");
    # Создаем структуру как для корректной конструкции,
    # чтобы искать ошибки уже внутри нее
    processCorrectSwitch();
}

[10] ВЫБОР -> выбор : {        # недописанная конструкция "выбор" 
    # Ругаемся
    setExtraOpenKeywordError("выбор");
    # Предлагаем текстовому редактору дописать конструкцию:
    #  -- дописать "при \nвсе", затем переместить курсор на 1 строку вверх
    suggest("при \nвсе", 1);
}

[0] ПРИ* -> при ФРАГМЕНТ_АЛГОРИТМА* : {
    processCorrectCase();
}

# --- цикл

[0] ЦИКЛ -> нц ФРАГМЕНТ_АЛГОРИТМА* КЦ : {
    processCorrectBeginOfLoop();
} 

[10] ЦИКЛ -> нц : {            # недописанная конструкция "нц"
    # Ругаемся
    setExtraOpenKeywordError("нц");
    # Предлагаем текстовому редактору дописать конструкцию:
    #  -- дописать "\nкц", затем переместить курсор на 1 строку вверх
    suggest("\nкц", 1);
}

[11] ЦИКЛ -> нц ФРАГМЕНТ_АЛГОРИТМА* : {            # нет парного "кц"
    # Ругаемся
    setExtraOpenKeywordError("нц");
}

[0] КЦ -> кц : {
    processCorrectEndOfLoop();
}

[20] ЦИКЛ -> нц ФРАГМЕНТ_АЛГОРИТМА* кон : {            # нет парного "кц"
    # Ругаемся
    setExtraOpenKeywordError("нц");
} {
    # Ошибка: "кон" вместо "кц"
    setCurrentError("'end' instead of 'end loop'");
    processCorrectEndOfLoop();
}
