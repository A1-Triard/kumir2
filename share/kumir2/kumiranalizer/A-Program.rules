# ====================== Программа в целом


# ----------- Правила корректной программы

[0] START -> \
        begin \
        ЗАГРУЗКА* \         # Строки использовать
        ЛИНЕЙНАЯ_СТРОКА* \  # Простые строки до алгоритмов
        АЛГОРИТМ* \         # Алгоритмы
        end

[0] ЗАГРУЗКА* -> использовать : { processCorrectLoad(); }
[0] ЛИНЕЙНАЯ_СТРОКА* -> простое_предложение : { appendSimpleLine(); }


# ----------- Ошибочные правила

[6] ЛИНЕЙНАЯ_СТРОКА* -> использовать : {
    # Строки "использовать" должны быть в начале программы.
    # Ругаемся, что строка не на месте
    setCurrentError("Misplaced import");

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}

[93] ЛИНЕЙНАЯ_СТРОКА* -> если : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}

[93] ЛИНЕЙНАЯ_СТРОКА* -> то : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}
[93] ЛИНЕЙНАЯ_СТРОКА* -> иначе : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}
[93] ЛИНЕЙНАЯ_СТРОКА* -> все : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}
[93] ЛИНЕЙНАЯ_СТРОКА* -> выбор : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}
[93] ЛИНЕЙНАЯ_СТРОКА* -> при : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}
[93] ЛИНЕЙНАЯ_СТРОКА* -> нц : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}
[93] ЛИНЕЙНАЯ_СТРОКА* -> кц : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}
[93] ЛИНЕЙНАЯ_СТРОКА* -> нач : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}

[93] ЛИНЕЙНАЯ_СТРОКА* -> ограничение_алгоритма : {
    # В инициализации алгоритма допускаются только не 
    # ветвящиеся конструкции, поэтому ругаемся
    setOutOfAlgError();

    # Добавляем строку (которая уже помечена как ошибочная)
    # в текущее место программы
    appendSimpleLine();
}

