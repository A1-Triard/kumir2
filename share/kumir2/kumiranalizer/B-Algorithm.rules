# ====================== Алгоритмы


[0] АЛГОРИТМ* -> \
        алг \                           # признак начала алгоритма
        МУСОР_АЛГ_НАЧ* \                # какая-та бяка
        ДОКУМЕНТАЦИЯ* \                 # комментарий специального вида
        ДАНО_НАДО* \                    # ограничения алгоритма
        ТЕЛО_АЛГОРИТМА \                # см. ниже
: {
    # Создаем новый алгоритм и делаем его текущим
    processCorrectAlgHeader();
}

[9] АЛГОРИТМ* -> \
        алг \                           # признак начала алгоритма
        ДОКУМЕНТАЦИЯ* \                 # комментарий специального вида
        ДАНО_НАДО* \                    # ограничения алгоритма
        ФРАГМЕНТ_АЛГОРИТМА* \           # попытка описать тело без "нач"
        КОНЕЦ_АЛГОРИТМА \
: {
    # Ошибка, но, трактуем как легальную структуру алгоритма
    processAlgWithNoBegin();
}

[0] МУСОР_АЛГ_НАЧ* -> 0                 # в корректной программе его быть не должно
[10] МУСОР_АЛГ_НАЧ* -> !ограничение_алгоритма,нач,кон \ # всё, кроме "нач", "дано", 
                                                        # "надо", спецкомментария
                                                        # и "кон"
: {
    setGarbageAlgError();
}


[0] ДОКУМЕНТАЦИЯ* -> строка_документации : {
    processCorrectDocLine();
}

[0] ДАНО_НАДО* -> ограничение_алгоритма\# строки "дано" или "надо"
        МУСОР_АЛГ_НАЧ* \                # мусор может встетится после "дано"/"надо"
: {
    processCorrectRestrictionLine();
}

[0] ТЕЛО_АЛГОРИТМА -> нач \             # начало тела алгоритма
        ФРАГМЕНТ_АЛГОРИТМА* \           # см. файл C-AlgorithmPart.rules
        КОНЕЦ_АЛГОРИТМА \               # конец тела алгоритма
        МУСОР_ПОСЛЕ_АЛГОРИТМА* \        # см. ниже
: {
    # Кладем в стек разбора указатель на тело текущего алгоритма
    processCorrectAlgBegin();
}

[11] ТЕЛО_АЛГОРИТМА -> нач \           # нет "кон"
                       ФРАГМЕНТ_АЛГОРИТМА*: {          
    # Ругаемся
    processCorrectAlgBegin();
    setExtraOpenKeywordError("нач");
}

[15] ТЕЛО_АЛГОРИТМА -> нач : {          # недописанная конструкция "алг нач"
    # Ругаемся
    setExtraOpenKeywordError("нач");
    # Предлагаем текстовому редактору дописать конструкцию:
    #  -- дописать "\nкон\n", затем переместить курсор на 2 строки вверх
    suggest("\nкон\n", 2); 
}

[0]  КОНЕЦ_АЛГОРИТМА -> кон : {
    # Вытаскиваем из стека разбора указатель на тело текущего алгоритма
    processCorrectAlgEnd();
}

[8]  КОНЕЦ_АЛГОРИТМА -> кон_исп : {
    # "кон_исп" вместо "кон" -- это ошибка.
    # Трактуем ее как псевдо-"кон" и ругаемся
    processModEndInsteadOfAlgEnd();
}

[0] МУСОР_ПОСЛЕ_АЛГОРИТМА* -> 0         # в корректной программе его быть не должно

[91] АЛГОРИТМ* -> кон : { setExtraCloseKeywordError("кон"); }

[91] АЛГОРИТМ* -> при : { setOutOfAlgError();  } 
[91] АЛГОРИТМ* -> все : { setOutOfAlgError();  } 
[91] АЛГОРИТМ* -> кц : { setOutOfAlgError();  } 
[91] АЛГОРИТМ* -> кон : { setOutOfAlgError();  }
[91] АЛГОРИТМ* -> ограничение_алгоритма : { setOutOfAlgError();  } 
[91] АЛГОРИТМ* -> строка_документации : { setOutOfAlgError();  } 
[91] АЛГОРИТМ* -> нач ФРАГМЕНТ_АЛГОРИТМА* КОНЕЦ_АЛГОРИТМА : { setCurrentError("No algorhitm header"); addDummyAlgHeader(); processCorrectAlgBegin(); }

[92] АЛГОРИТМ* -> алг : { setCurrentError("No algorhitm implementation"); appendSimpleLine(); suggest("нач\n\nкон\n",5); }
[92] АЛГОРИТМ* -> если : { setOutOfAlgError();  }
[92] АЛГОРИТМ* -> кон : { setOutOfAlgError();  }
[92] АЛГОРИТМ* -> выбор : { setOutOfAlgError();  }
[92] АЛГОРИТМ* -> при : { setOutOfAlgError();  }
[92] АЛГОРИТМ* -> все : { setOutOfAlgError();  }
[92] АЛГОРИТМ* -> нц : { setOutOfAlgError();  }
[92] АЛГОРИТМ* -> кц : { setOutOfAlgError();  }
