/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self includes
#include "robotmodulebase.h"
#include "robotplugin.h"

// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#include <QtGui>

namespace ActorRobot {

RobotModuleBase::RobotModuleBase(ExtensionSystem::KPlugin* parent)
    : QObject(parent)
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        static const QString currentLocaleName = QLocale().name();
        
        m_menuRobot = new QMenu();
        if (currentLocaleName=="ru_RU") {
            m_menuRobot->setTitle(QString::fromUtf8("Робот"));
        }
        else {
            m_menuRobot->setTitle(QString::fromLatin1("Robot"));
        }
        
        m_actionRobotLoadEnvironment = m_menuRobot->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionRobotLoadEnvironment->setText(QString::fromUtf8("Загрузить обстановку..."));
        }
        else {
            m_actionRobotLoadEnvironment->setText(QString::fromLatin1("Load Environment..."));
        }
        
        m_actionRobotLoadRescent = m_menuRobot->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionRobotLoadRescent->setText(QString::fromUtf8("Недавние обстановки"));
        }
        else {
            m_actionRobotLoadRescent->setText(QString::fromLatin1("Load Rescent..."));
        }
        
        m_actionRobotRevertEnvironment = m_menuRobot->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionRobotRevertEnvironment->setText(QString::fromUtf8("Вернуть исходную обстановку"));
        }
        else {
            m_actionRobotRevertEnvironment->setText(QString::fromLatin1("Revert Environment"));
        }
        
        m_actionRobotSaveEnvironment = m_menuRobot->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionRobotSaveEnvironment->setText(QString::fromUtf8("Сохранить обстановку..."));
        }
        else {
            m_actionRobotSaveEnvironment->setText(QString::fromLatin1("Save Environment..."));
        }
        
        m_actionRobotSave2Png = m_menuRobot->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionRobotSave2Png->setText(QString::fromUtf8("Сохранить как изображение…"));
        }
        else {
            m_actionRobotSave2Png->setText(QString::fromLatin1("Save2Png."));
        }
        
        m_actionRobotEditEnvironment = m_menuRobot->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionRobotEditEnvironment->setText(QString::fromUtf8("Редактировать обстановку..."));
        }
        else {
            m_actionRobotEditEnvironment->setText(QString::fromLatin1("Edit Environment..."));
        }
        
        m_actionRobotAutoWindowSize = m_menuRobot->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionRobotAutoWindowSize->setText(QString::fromUtf8("Авто размер окна"));
        }
        else {
            m_actionRobotAutoWindowSize->setText(QString::fromLatin1("Auto window size."));
        }
        
        m_actionRobotNewEnvironment = m_menuRobot->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionRobotNewEnvironment->setText(QString::fromUtf8("Новая обстановка..."));
        }
        else {
            m_actionRobotNewEnvironment->setText(QString::fromLatin1("New Environment..."));
        }
        
        
    }
}

/* protected */ const ExtensionSystem::CommandLine& RobotModuleBase::commandLineParameters() const
{
    RobotPlugin * plugin = qobject_cast<RobotPlugin*>(parent());
    return plugin->commandLineParameters_;
}

/* public virtual */ void RobotModuleBase::handleGuiReady()
{
}

/* public virtual */ QString RobotModuleBase::initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters)
{
    Q_UNUSED(configurationParameters);
    Q_UNUSED(runtimeParameters);

    // Return error text or an empty string on successfull  initialization
    return QString();
}

/* public virtual */ bool RobotModuleBase::isSafeToQuit()
{
    return true;
}

/* public virtual slot */ void RobotModuleBase::loadActorData(QIODevice * source)
{
    Q_UNUSED(source);  // By default do nothing

}



/* public */ QList<QMenu*> RobotModuleBase::moduleMenus() const
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        QList<QMenu*> result;
        result.push_back(m_menuRobot);
        
        return result;
    }
    else {
        return QList<QMenu*>();
    }
}

/* protected */ void RobotModuleBase::msleep(unsigned long msecs)
{
    RobotPlugin* plugin = qobject_cast<RobotPlugin*>(parent());
    plugin->msleep(msecs);
}

/* public */ QDir RobotModuleBase::myResourcesDir() const
{
    RobotPlugin* plugin = qobject_cast<RobotPlugin*>(parent());
    return plugin->myResourcesDir();
}

/* public */ ExtensionSystem::SettingsPtr RobotModuleBase::mySettings() const
{
    RobotPlugin* plugin = qobject_cast<RobotPlugin*>(parent());
    return plugin->mySettings();
}





/* protected */ void RobotModuleBase::setError(const QString & errorText)
{
    RobotPlugin* plugin = qobject_cast<RobotPlugin*>(parent());
    plugin->errorText_ = errorText;
}

/* protected */ void RobotModuleBase::sleep(unsigned long secs)
{
    RobotPlugin* plugin = qobject_cast<RobotPlugin*>(parent());
    plugin->sleep(secs);
}

/* public virtual */ QVariantList RobotModuleBase::templateParameters() const
{
    RobotPlugin * plugin = qobject_cast<RobotPlugin*>(parent());
    return plugin->defaultTemplateParameters();
}

/* protected */ void RobotModuleBase::usleep(unsigned long usecs)
{
    RobotPlugin* plugin = qobject_cast<RobotPlugin*>(parent());
    plugin->usleep(usecs);
}



} // namespace ActorRobot
