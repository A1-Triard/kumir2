/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self include
#include "isometricrobotplugin.h"
#include "isometricrobotmodulebase.h"
#include "isometricrobotmodule.h"

namespace ActorIsometricRobot {



IsometricRobotPlugin::IsometricRobotPlugin()
    : ExtensionSystem::KPlugin()
    , module_(nullptr)
    , asyncRunThread_(nullptr)
    , settingsPage_(nullptr)
{
    bool hasGuiThread = true;
#ifdef Q_OS_LINUX
    hasGuiThread = getenv("DISPLAY") != 0;
#endif
    QObject::connect(
        this, SIGNAL(asyncRun(quint32,QVariantList)),
        this, SLOT(asyncEvaluate(quint32,QVariantList)),
        //hasGuiThread? Qt::QueuedConnection :
        Qt::DirectConnection
    );
}

/* protected */ QList<ExtensionSystem::CommandLineParameter> IsometricRobotPlugin::acceptableCommandLineParameters() const
{
    return IsometricRobotModule::acceptableCommandLineParameters();
}

/* public */ QVariantList IsometricRobotPlugin::algOptResults() const
{
    return optResults_;
}

/* public */ QByteArray IsometricRobotPlugin::asciiModuleName() const
{
    return QByteArray("Isometric Robot");
}

/* private slot */ void IsometricRobotPlugin::asyncEvaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        case 0x0000: {
            /* go forward */
            module_->runGoForward();
            break;
        }
        
        case 0x0001: {
            /* turn right */
            module_->runTurnRight();
            break;
        }
        
        case 0x0002: {
            /* turn left */
            module_->runTurnLeft();
            break;
        }
        
        case 0x0003: {
            /* do paint */
            module_->runDoPaint();
            break;
        }
        
        
        default : {
            errorText_ = "Unknown method index for async evaluation";
        }
    }
    Q_EMIT sync();
}

/* protected */ void IsometricRobotPlugin::changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current)
{
    module_->changeGlobalState(old, current);
}

/* public */ void IsometricRobotPlugin::connectSync(QObject* receiver, const char* method)
{
    QObject::connect(this, SIGNAL(sync()), receiver, method, Qt::DirectConnection);
}

/* protected */ void IsometricRobotPlugin::createPluginSpec()
{
    _pluginSpec.name = "ActorIsometricRobot";
    _pluginSpec.gui = isGuiRequired();
}

/* public */ QVariant IsometricRobotPlugin::customValueFromString(const QByteArray & , const QString & ) const
{
    QVariant result;

    return result;
}

/* public */ QString IsometricRobotPlugin::customValueToString(const QByteArray & , const QVariant & ) const
{
    QString result;

    return result;
}

/* public */ QVariantList IsometricRobotPlugin::defaultTemplateParameters() const
{
    QVariantList result;
    return result;
}

/* public */ QString IsometricRobotPlugin::errorText() const
{
    return errorText_;
}

/* public */ Shared::EvaluationStatus IsometricRobotPlugin::evaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        case 0x0000: {
            /* go forward */
            Q_EMIT asyncRun(index, args);
            return ES_Async;
            break;
        }
        
        case 0x0001: {
            /* turn right */
            Q_EMIT asyncRun(index, args);
            return ES_Async;
            break;
        }
        
        case 0x0002: {
            /* turn left */
            Q_EMIT asyncRun(index, args);
            return ES_Async;
            break;
        }
        
        case 0x0003: {
            /* do paint */
            Q_EMIT asyncRun(index, args);
            return ES_Async;
            break;
        }
        
        case 0x0004: {
            /* is cell painted */
            result_ = QVariant::fromValue(module_->runIsCellPainted());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0005: {
            /* is cell clean */
            result_ = QVariant::fromValue(module_->runIsCellClean());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0006: {
            /* is wall ahead */
            result_ = QVariant::fromValue(module_->runIsWallAhead());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0007: {
            /* is free ahead */
            result_ = QVariant::fromValue(module_->runIsFreeAhead());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0008: {
            /* @@is marked */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            result_ = QVariant::fromValue(module_->runIsMarked(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0009: {
            /* @@is painted */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            result_ = QVariant::fromValue(module_->runIsPainted(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x000a: {
            /* @@position x */
            result_ = QVariant::fromValue(module_->runPositionX());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x000b: {
            /* @@position y */
            result_ = QVariant::fromValue(module_->runPositionY());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x000c: {
            /* @@size x */
            result_ = QVariant::fromValue(module_->runSizeX());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x000d: {
            /* @@size y */
            result_ = QVariant::fromValue(module_->runSizeY());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x000e: {
            /* @@is flagged */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            result_ = QVariant::fromValue(module_->runIsFlagged(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        
        default : {
            errorText_ = "Unknown method index";
            return ES_Error;
        }
    }
}

/* public */ Shared::ActorInterface::FunctionList IsometricRobotPlugin::functionList() const
{
    Shared::ActorInterface::FunctionList result;
    
    /* алг вперед */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("go forward");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("вперед");
    result.last().returnType = Shared::ActorInterface::Void;
    
    /* алг повернуть направо */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("turn right");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("повернуть направо");
    result.last().returnType = Shared::ActorInterface::Void;
    
    /* алг повернуть налево */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("turn left");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("повернуть налево");
    result.last().returnType = Shared::ActorInterface::Void;
    
    /* алг закрасить */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("do paint");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("закрасить");
    result.last().returnType = Shared::ActorInterface::Void;
    
    /* алг лог клетка закрашена */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("is cell painted");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("клетка закрашена");
    result.last().returnType = Shared::ActorInterface::Bool;
    
    /* алг лог клетка чистая */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("is cell clean");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("клетка чистая");
    result.last().returnType = Shared::ActorInterface::Bool;
    
    /* алг лог впереди стена */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("is wall ahead");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("впереди стена");
    result.last().returnType = Shared::ActorInterface::Bool;
    
    /* алг лог впереди свободно */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("is free ahead");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("впереди свободно");
    result.last().returnType = Shared::ActorInterface::Bool;
    
    /* алг лог @@есть точка(цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::TeacherModeFunction;
    result.last().asciiName = QByteArray("@@is marked");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("@@есть точка");
    result.last().returnType = Shared::ActorInterface::Bool;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг лог @@клетка закрашена(цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::TeacherModeFunction;
    result.last().asciiName = QByteArray("@@is painted");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("@@клетка закрашена");
    result.last().returnType = Shared::ActorInterface::Bool;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цел @@положение робота x */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::TeacherModeFunction;
    result.last().asciiName = QByteArray("@@position x");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("@@положение робота x");
    result.last().returnType = Shared::ActorInterface::Int;
    
    /* алг цел @@положение робота y */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::TeacherModeFunction;
    result.last().asciiName = QByteArray("@@position y");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("@@положение робота y");
    result.last().returnType = Shared::ActorInterface::Int;
    
    /* алг цел @@размер поля x */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::TeacherModeFunction;
    result.last().asciiName = QByteArray("@@size x");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("@@размер поля x");
    result.last().returnType = Shared::ActorInterface::Int;
    
    /* алг цел @@размер поля y */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::TeacherModeFunction;
    result.last().asciiName = QByteArray("@@size y");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("@@размер поля y");
    result.last().returnType = Shared::ActorInterface::Int;
    
    /* алг лог @@финишная(цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::TeacherModeFunction;
    result.last().asciiName = QByteArray("@@is flagged");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("@@финишная");
    result.last().returnType = Shared::ActorInterface::Bool;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    ;
    return result;
}

/* private slot */ void IsometricRobotPlugin::handleSettingsChangedCppImplementation(const QStringList & keys)
{
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* protected */ QString IsometricRobotPlugin::initialize(const QStringList &a, const ExtensionSystem::CommandLine &b)
{
    module_ = new IsometricRobotModule(this);
    asyncRunThread_ = new IsometricRobotAsyncRunThread(this, module_);
    QObject::connect(asyncRunThread_, SIGNAL(finished()),
                     this, SIGNAL(sync()));
    QObject::connect(module_, SIGNAL(notifyOnTemplateParametersChanged()),
                     this, SIGNAL(notifyOnTemplateParametersChanged()));
    
    return module_->initialize(a, b);
}

/* public */ bool IsometricRobotPlugin::isGuiRequired() const
{
    return false;
}

/* public */ bool IsometricRobotPlugin::isSafeToQuit()
{
    return module_->isSafeToQuit();
}

/* public slot */ void IsometricRobotPlugin::loadActorData(QIODevice * source)
{
    if (module_) {
        module_->loadActorData(source);
    }
}

/* public */ QString IsometricRobotPlugin::localizedModuleName(const QLocale::Language ) const
{
    // TODO non-Russian languages not implemented yet
    return QString::fromUtf8("Вертун");
}

/* public */ QString IsometricRobotPlugin::mainIconName() const
{
    return QString::fromLatin1("robot25d");
}

/* public */ QWidget* IsometricRobotPlugin::mainWidget()
{
    return module_->mainWidget();
}

/* public */ QList<QMenu*> IsometricRobotPlugin::moduleMenus() const
{
    return module_->moduleMenus();
}

/* protected */ void IsometricRobotPlugin::msleep(unsigned long secs)
{
    //if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->amsleep(secs);
    //}
}

/* public */ void IsometricRobotPlugin::notifyGuiReady()
{
    module_->handleGuiReady();
}

/* public */ QString IsometricRobotPlugin::pultIconName() const
{
    return QString::fromLatin1("robot25d-pult");
}

/* public */ QWidget* IsometricRobotPlugin::pultWidget()
{
    return module_->pultWidget();
}

/* public */ void IsometricRobotPlugin::reset()
{
    module_->reset();
}

/* public */ QVariant IsometricRobotPlugin::result() const
{
    return result_;
}

/* public */ void IsometricRobotPlugin::setAnimationEnabled(bool enabled)
{
    // The module might be not created at a time of call,
    // so check it propertly
    if (module_) {
        module_->setAnimationEnabled(enabled);
    }
}

/* public */ QWidget* IsometricRobotPlugin::settingsEditorPage()
{
    return settingsPage_;
}

/* protected */ void IsometricRobotPlugin::sleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->asleep(secs);
    }
}

/* public */ QVariantList IsometricRobotPlugin::templateParameters() const
{
    if (module_) {
        return module_->templateParameters();
    }
    else {
        return defaultTemplateParameters();
    }
}

/* public */ void IsometricRobotPlugin::terminateEvaluation()
{
    module_->terminateEvaluation();
}

/* public */ Shared::ActorInterface::TypeList IsometricRobotPlugin::typeList() const
{
    Shared::ActorInterface::TypeList result;
    
    return result;
}

/* private */ void IsometricRobotPlugin::updateSettings(const QStringList & keys)
{
    if (settingsPage_) {
        settingsPage_->setSettingsObject(mySettings());
    }
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* public */ QList<Shared::ActorInterface*> IsometricRobotPlugin::usesList() const
{
    static const QList<Shared::ActorInterface*> empty = QList<Shared::ActorInterface*>();
    return empty;
}

/* protected */ void IsometricRobotPlugin::usleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->ausleep(secs);
    }
}



IsometricRobotAsyncRunThread::IsometricRobotAsyncRunThread(class IsometricRobotPlugin* plugin, class IsometricRobotModuleBase* module)
    : QThread(plugin)
    , index_(0)
    , args_(QVariantList())
    , plugin_(plugin)
    , module_(module)
{
}

/* public */ void IsometricRobotAsyncRunThread::amsleep(unsigned long secs)
{
    msleep(secs);
}

/* public */ void IsometricRobotAsyncRunThread::asleep(unsigned long secs)
{
    sleep(secs);
}

/* public */ void IsometricRobotAsyncRunThread::ausleep(unsigned long secs)
{
    usleep(secs);
}

/* public */ void IsometricRobotAsyncRunThread::init(quint32 index, const QVariantList & args)
{
    index_ = index;
    args_ = args;
}

/* private */ void IsometricRobotAsyncRunThread::run()
{
    switch (index_) {
        case 0x0000: {
            /* go forward */
            module_->runGoForward();
            break;
        }
        case 0x0001: {
            /* turn right */
            module_->runTurnRight();
            break;
        }
        case 0x0002: {
            /* turn left */
            module_->runTurnLeft();
            break;
        }
        case 0x0003: {
            /* do paint */
            module_->runDoPaint();
            break;
        }
        
        default: {
            plugin_->errorText_ = "Unknown method index";
        }
    }
}



} // namespace ActorIsometricRobot
#if QT_VERSION < 0x050000
Q_EXPORT_PLUGIN(ActorIsometricRobot::IsometricRobotPlugin)
#endif
