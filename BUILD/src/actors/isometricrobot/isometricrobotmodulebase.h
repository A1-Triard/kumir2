/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

#ifndef ISOMETRICROBOTMODULEBASE_H
#define ISOMETRICROBOTMODULEBASE_H

// Custom types declaration headers (if any)


// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#if QT_VERSION >= 0x050000
#   include <QtWidgets>
#else
#   include <QtGui>
#endif

namespace ActorIsometricRobot {



class IsometricRobotModuleBase
    : public QObject
{
    Q_OBJECT
public /* methods */:
    IsometricRobotModuleBase(ExtensionSystem::KPlugin* parent);
    QList<QMenu*> moduleMenus() const;
    QDir myResourcesDir() const;
    ExtensionSystem::SettingsPtr mySettings() const;
    virtual QWidget* mainWidget() const = 0;
    virtual QWidget* pultWidget() const = 0;
    virtual void handleGuiReady();
    virtual QString initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters);
    virtual bool isSafeToQuit();
    virtual QVariantList templateParameters() const;
public Q_SLOTS:
    virtual void reset() = 0;
    virtual void reloadSettings(ExtensionSystem::SettingsPtr settings, const QStringList & keys) = 0;
    virtual void changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current) = 0;
    virtual void terminateEvaluation() = 0;
    virtual void setAnimationEnabled(bool enabled) = 0;
    virtual void runGoForward() = 0;
    virtual void runTurnRight() = 0;
    virtual void runTurnLeft() = 0;
    virtual void runDoPaint() = 0;
    virtual bool runIsCellPainted() = 0;
    virtual bool runIsCellClean() = 0;
    virtual bool runIsWallAhead() = 0;
    virtual bool runIsFreeAhead() = 0;
    virtual bool runIsMarked(const int x, const int y) = 0;
    virtual bool runIsPainted(const int x, const int y) = 0;
    virtual int runPositionX() = 0;
    virtual int runPositionY() = 0;
    virtual int runSizeX() = 0;
    virtual int runSizeY() = 0;
    virtual bool runIsFlagged(const int x, const int y) = 0;
    virtual void loadActorData(QIODevice * source);
Q_SIGNALS:
    void notifyOnTemplateParametersChanged();


    /* ========= CLASS PRIVATE ========= */
protected /* methods */:
    const ExtensionSystem::CommandLine& commandLineParameters() const;
    void msleep(unsigned long msecs);
    void setError(const QString & errorText);
    void sleep(unsigned long secs);
    void usleep(unsigned long usecs);



protected /* fields */:
    QMenu* m_menuRobot25D;
    QAction* m_actionRobot25DLoadEnvironment;
    QAction* m_actionRobot25DResetEnvironment;

};
        

} // namespace ActorIsometricRobot

#endif // ISOMETRICROBOTMODULEBASE_H
