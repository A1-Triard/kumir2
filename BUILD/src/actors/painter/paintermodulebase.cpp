/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self includes
#include "paintermodulebase.h"
#include "painterplugin.h"

// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#include <QtGui>

namespace ActorPainter {

PainterModuleBase::PainterModuleBase(ExtensionSystem::KPlugin* parent)
    : QObject(parent)
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        static const QString currentLocaleName = QLocale().name();
        
        m_menuPainter = new QMenu();
        if (currentLocaleName=="ru_RU") {
            m_menuPainter->setTitle(QString::fromUtf8("Рисователь"));
        }
        else {
            m_menuPainter->setTitle(QString::fromLatin1("Painter"));
        }
        
        m_actionPainterNewPage = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterNewPage->setText(QString::fromUtf8("Новый лист..."));
        }
        else {
            m_actionPainterNewPage->setText(QString::fromLatin1("New Page..."));
        }
        
        m_actionPainterLoadPage = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterLoadPage->setText(QString::fromUtf8("Загрузить..."));
        }
        else {
            m_actionPainterLoadPage->setText(QString::fromLatin1("Load Page..."));
        }
        
        m_actionPainterRevertPage = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterRevertPage->setText(QString::fromUtf8("Вернуть к исходному"));
        }
        else {
            m_actionPainterRevertPage->setText(QString::fromLatin1("Revert Page"));
        }
        
        m_actionPainterSaveACopyAs = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterSaveACopyAs->setText(QString::fromUtf8("Сохранить копию как..."));
        }
        else {
            m_actionPainterSaveACopyAs->setText(QString::fromLatin1("Save a Copy as..."));
        }
        
        m_actionPainterScale100 = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterScale100->setText(QString::fromUtf8("Масштаб 100%"));
        }
        else {
            m_actionPainterScale100->setText(QString::fromLatin1("Scale 100%"));
        }
        
        m_actionPainterFitWidth = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterFitWidth->setText(QString::fromUtf8("Масштаб по ширине"));
        }
        else {
            m_actionPainterFitWidth->setText(QString::fromLatin1("Fit Width"));
        }
        
        m_actionPainterFitHeight = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterFitHeight->setText(QString::fromUtf8("Масштаб по высоте"));
        }
        else {
            m_actionPainterFitHeight->setText(QString::fromLatin1("Fit Height"));
        }
        
        m_actionPainterFitWindow = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterFitWindow->setText(QString::fromUtf8("Масштаб по окну"));
        }
        else {
            m_actionPainterFitWindow->setText(QString::fromLatin1("Fit Window"));
        }
        
        m_actionPainterColorInStatusBar = m_menuPainter->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionPainterColorInStatusBar->setText(QString::fromUtf8("Цвет в строке статуса"));
        }
        else {
            m_actionPainterColorInStatusBar->setText(QString::fromLatin1("Color in status bar"));
        }
        
        m_actionPainterColorInStatusBar->setMenu(new QMenu);
        m_actionPainterColorInStatusBar->menu()->setTitle(m_actionPainterColorInStatusBar->text());
        m_actionPainterColorInStatusBarRRGGBB = m_actionPainterColorInStatusBar->menu()->addAction("");
        m_actionPainterColorInStatusBarRRGGBB->setText(QString::fromLatin1("#RRGGBB"));
        
        m_actionPainterColorInStatusBarRGB = m_actionPainterColorInStatusBar->menu()->addAction("");
        m_actionPainterColorInStatusBarRGB->setText(QString::fromLatin1("R, G, B"));
        
        m_actionPainterColorInStatusBarCMYK = m_actionPainterColorInStatusBar->menu()->addAction("");
        m_actionPainterColorInStatusBarCMYK->setText(QString::fromLatin1("C, M, Y, K"));
        
        m_actionPainterColorInStatusBarHSL = m_actionPainterColorInStatusBar->menu()->addAction("");
        m_actionPainterColorInStatusBarHSL->setText(QString::fromLatin1("H, S, L"));
        
        m_actionPainterColorInStatusBarHSV = m_actionPainterColorInStatusBar->menu()->addAction("");
        m_actionPainterColorInStatusBarHSV->setText(QString::fromLatin1("H, S, V"));
        
        
    }
}

/* protected */ const ExtensionSystem::CommandLine& PainterModuleBase::commandLineParameters() const
{
    PainterPlugin * plugin = qobject_cast<PainterPlugin*>(parent());
    return plugin->commandLineParameters_;
}

/* public virtual */ void PainterModuleBase::handleGuiReady()
{
}

/* public virtual */ QString PainterModuleBase::initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters)
{
    Q_UNUSED(configurationParameters);
    Q_UNUSED(runtimeParameters);

    // Return error text or an empty string on successfull  initialization
    return QString();
}

/* public virtual */ bool PainterModuleBase::isSafeToQuit()
{
    return true;
}

/* public virtual slot */ void PainterModuleBase::loadActorData(QIODevice * source)
{
    Q_UNUSED(source);  // By default do nothing

}



/* public */ QList<QMenu*> PainterModuleBase::moduleMenus() const
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        QList<QMenu*> result;
        result.push_back(m_menuPainter);
        
        return result;
    }
    else {
        return QList<QMenu*>();
    }
}

/* protected */ void PainterModuleBase::msleep(unsigned long msecs)
{
    PainterPlugin* plugin = qobject_cast<PainterPlugin*>(parent());
    plugin->msleep(msecs);
}

/* public */ QDir PainterModuleBase::myResourcesDir() const
{
    PainterPlugin* plugin = qobject_cast<PainterPlugin*>(parent());
    return plugin->myResourcesDir();
}

/* public */ ExtensionSystem::SettingsPtr PainterModuleBase::mySettings() const
{
    PainterPlugin* plugin = qobject_cast<PainterPlugin*>(parent());
    return plugin->mySettings();
}





/* protected */ void PainterModuleBase::setError(const QString & errorText)
{
    PainterPlugin* plugin = qobject_cast<PainterPlugin*>(parent());
    plugin->errorText_ = errorText;
}

/* protected */ void PainterModuleBase::sleep(unsigned long secs)
{
    PainterPlugin* plugin = qobject_cast<PainterPlugin*>(parent());
    plugin->sleep(secs);
}

/* public virtual */ QVariantList PainterModuleBase::templateParameters() const
{
    PainterPlugin * plugin = qobject_cast<PainterPlugin*>(parent());
    return plugin->defaultTemplateParameters();
}

/* protected */ void PainterModuleBase::usleep(unsigned long usecs)
{
    PainterPlugin* plugin = qobject_cast<PainterPlugin*>(parent());
    plugin->usleep(usecs);
}



} // namespace ActorPainter
