/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self include
#include "painterplugin.h"
#include "paintermodulebase.h"
#include "paintermodule.h"

namespace ActorPainter {


QVariant encode(const Color & record) {
    QVariantList result;
    result << QVariant(record.r);
    result << QVariant(record.g);
    result << QVariant(record.b);
    result << QVariant(record.a);

    return result;
}

Color decode(const QVariant & raw) {
    Color result;
    const QVariantList alist = raw.toList();
    result.r = alist.size() > 0 ? alist.at(0).toInt() : 0;
    result.g = alist.size() > 1 ? alist.at(1).toInt() : 0;
    result.b = alist.size() > 2 ? alist.at(2).toInt() : 0;
    result.a = alist.size() > 3 ? alist.at(3).toInt() : 0;

    return result;
}
            


PainterPlugin::PainterPlugin()
    : ExtensionSystem::KPlugin()
    , module_(nullptr)
    , asyncRunThread_(nullptr)
    , settingsPage_(nullptr)
{
    bool hasGuiThread = true;
#ifdef Q_OS_LINUX
    hasGuiThread = getenv("DISPLAY") != 0;
#endif
    QObject::connect(
        this, SIGNAL(asyncRun(quint32,QVariantList)),
        this, SLOT(asyncEvaluate(quint32,QVariantList)),
        //hasGuiThread? Qt::QueuedConnection :
        Qt::DirectConnection
    );
}

/* protected */ QList<ExtensionSystem::CommandLineParameter> PainterPlugin::acceptableCommandLineParameters() const
{
    return PainterModule::acceptableCommandLineParameters();
}

/* public */ QVariantList PainterPlugin::algOptResults() const
{
    return optResults_;
}

/* public */ QByteArray PainterPlugin::asciiModuleName() const
{
    return QByteArray("Painter");
}

/* private slot */ void PainterPlugin::asyncEvaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        
        default : {
            errorText_ = "Unknown method index for async evaluation";
        }
    }
    Q_EMIT sync();
}

/* protected */ void PainterPlugin::changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current)
{
    module_->changeGlobalState(old, current);
}

/* public */ void PainterPlugin::connectSync(QObject* receiver, const char* method)
{
    QObject::connect(this, SIGNAL(sync()), receiver, method, Qt::DirectConnection);
}

/* protected */ void PainterPlugin::createPluginSpec()
{
    _pluginSpec.name = "ActorPainter";
    _pluginSpec.gui = isGuiRequired();
}

/* public */ QVariant PainterPlugin::customValueFromString(const QByteArray & , const QString & ) const
{
    QVariant result;

    return result;
}

/* public */ QString PainterPlugin::customValueToString(const QByteArray & , const QVariant & ) const
{
    QString result;

    return result;
}

/* public */ QVariantList PainterPlugin::defaultTemplateParameters() const
{
    QVariantList result;
    return result;
}

/* public */ QString PainterPlugin::errorText() const
{
    return errorText_;
}

/* public */ Shared::EvaluationStatus PainterPlugin::evaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        case 0x0000: {
            /* CMYK */
            int c = qvariant_cast<int>(args[0]);
            int m = qvariant_cast<int>(args[1]);
            int y = qvariant_cast<int>(args[2]);
            int k = qvariant_cast<int>(args[3]);
            result_ = encode(module_->runCMYK(c, m, y, k));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0001: {
            /* CMYKA */
            int c = qvariant_cast<int>(args[0]);
            int m = qvariant_cast<int>(args[1]);
            int y = qvariant_cast<int>(args[2]);
            int k = qvariant_cast<int>(args[3]);
            int a = qvariant_cast<int>(args[4]);
            result_ = encode(module_->runCMYKA(c, m, y, k, a));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0002: {
            /* HSL */
            int h = qvariant_cast<int>(args[0]);
            int s = qvariant_cast<int>(args[1]);
            int l = qvariant_cast<int>(args[2]);
            result_ = encode(module_->runHSL(h, s, l));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0003: {
            /* HSLA */
            int h = qvariant_cast<int>(args[0]);
            int s = qvariant_cast<int>(args[1]);
            int l = qvariant_cast<int>(args[2]);
            int a = qvariant_cast<int>(args[3]);
            result_ = encode(module_->runHSLA(h, s, l, a));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0004: {
            /* HSV */
            int h = qvariant_cast<int>(args[0]);
            int s = qvariant_cast<int>(args[1]);
            int v = qvariant_cast<int>(args[2]);
            result_ = encode(module_->runHSV(h, s, v));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0005: {
            /* HSVA */
            int h = qvariant_cast<int>(args[0]);
            int s = qvariant_cast<int>(args[1]);
            int v = qvariant_cast<int>(args[2]);
            int a = qvariant_cast<int>(args[3]);
            result_ = encode(module_->runHSVA(h, s, v, a));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0006: {
            /* RGB */
            int r = qvariant_cast<int>(args[0]);
            int g = qvariant_cast<int>(args[1]);
            int b = qvariant_cast<int>(args[2]);
            result_ = encode(module_->runRGB(r, g, b));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0007: {
            /* RGBA */
            int r = qvariant_cast<int>(args[0]);
            int g = qvariant_cast<int>(args[1]);
            int b = qvariant_cast<int>(args[2]);
            int a = qvariant_cast<int>(args[3]);
            result_ = encode(module_->runRGBA(r, g, b, a));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0008: {
            /* move to */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            module_->runMoveTo(x, y);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0009: {
            /* page height */
            result_ = QVariant::fromValue(module_->runPageHeight());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x000a: {
            /* load page */
            QString fileName = qvariant_cast<QString>(args[0]);
            module_->runLoadPage(fileName);
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x000b: {
            /* fill */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            module_->runFill(x, y);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x000c: {
            /* set brush */
            Color colour = decode(args[0]);
            module_->runSetBrush(colour);
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x000d: {
            /* line */
            int x0 = qvariant_cast<int>(args[0]);
            int y0 = qvariant_cast<int>(args[1]);
            int x = qvariant_cast<int>(args[2]);
            int y = qvariant_cast<int>(args[3]);
            module_->runLine(x0, y0, x, y);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x000e: {
            /* line to */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            module_->runLineTo(x, y);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x000f: {
            /* polygon */
            int N = qvariant_cast<int>(args[0]);
            QVector< int > XX = toVector1<int>(args[1]);
            QVector< int > YY = toVector1<int>(args[2]);
            module_->runPolygon(N, XX, YY);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0010: {
            /* write */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            QString text = qvariant_cast<QString>(args[2]);
            module_->runWrite(x, y, text);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0011: {
            /* new page */
            int width = qvariant_cast<int>(args[0]);
            int height = qvariant_cast<int>(args[1]);
            Color background = decode(args[2]);
            module_->runNewPage(width, height, background);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0012: {
            /* circle */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            int r = qvariant_cast<int>(args[2]);
            module_->runCircle(x, y, r);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0013: {
            /* set pen */
            int width = qvariant_cast<int>(args[0]);
            Color color_ = decode(args[1]);
            module_->runSetPen(width, color_);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0014: {
            /* point */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            Color color_ = decode(args[2]);
            module_->runPoint(x, y, color_);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0015: {
            /* density */
            int value = qvariant_cast<int>(args[0]);
            module_->runDensity(value);
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0016: {
            /* rectangle */
            int x0 = qvariant_cast<int>(args[0]);
            int y0 = qvariant_cast<int>(args[1]);
            int x = qvariant_cast<int>(args[2]);
            int y = qvariant_cast<int>(args[3]);
            module_->runRectangle(x0, y0, x, y);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0017: {
            /* split to CMYK */
            Color color_ = decode(args[0]);
            int c = qvariant_cast<int>(args[1]);
            int m = qvariant_cast<int>(args[2]);
            int y = qvariant_cast<int>(args[3]);
            int k = qvariant_cast<int>(args[4]);
            module_->runSplitToCMYK(color_, c, m, y, k);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::fromValue(c);
            optResults_ << QVariant::fromValue(m);
            optResults_ << QVariant::fromValue(y);
            optResults_ << QVariant::fromValue(k);
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_RezResult;
            break;
        }
        
        case 0x0018: {
            /* split to HSL */
            Color color_ = decode(args[0]);
            int h = qvariant_cast<int>(args[1]);
            int s = qvariant_cast<int>(args[2]);
            int l = qvariant_cast<int>(args[3]);
            module_->runSplitToHSL(color_, h, s, l);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::fromValue(h);
            optResults_ << QVariant::fromValue(s);
            optResults_ << QVariant::fromValue(l);
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_RezResult;
            break;
        }
        
        case 0x0019: {
            /* split to HSV */
            Color color_ = decode(args[0]);
            int h = qvariant_cast<int>(args[1]);
            int s = qvariant_cast<int>(args[2]);
            int v = qvariant_cast<int>(args[3]);
            module_->runSplitToHSV(color_, h, s, v);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::fromValue(h);
            optResults_ << QVariant::fromValue(s);
            optResults_ << QVariant::fromValue(v);
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_RezResult;
            break;
        }
        
        case 0x001a: {
            /* split to RGB */
            Color color_ = decode(args[0]);
            int r = qvariant_cast<int>(args[1]);
            int g = qvariant_cast<int>(args[2]);
            int b = qvariant_cast<int>(args[3]);
            module_->runSplitToRGB(color_, r, g, b);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::fromValue(r);
            optResults_ << QVariant::fromValue(g);
            optResults_ << QVariant::fromValue(b);
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_RezResult;
            break;
        }
        
        case 0x001b: {
            /* save page */
            QString fileName = qvariant_cast<QString>(args[0]);
            module_->runSavePage(fileName);
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x001c: {
            /* unset brush */
            module_->runUnsetBrush();
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x001d: {
            /* point sample */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            result_ = encode(module_->runPointSample(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x001e: {
            /* center x */
            result_ = QVariant::fromValue(module_->runCenterX());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x001f: {
            /* center y */
            result_ = QVariant::fromValue(module_->runCenterY());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0020: {
            /* page width */
            result_ = QVariant::fromValue(module_->runPageWidth());
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0021: {
            /* text width */
            QString text = qvariant_cast<QString>(args[0]);
            result_ = QVariant::fromValue(module_->runTextWidth(text));
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0022: {
            /* set font */
            QString family = qvariant_cast<QString>(args[0]);
            int size = qvariant_cast<int>(args[1]);
            bool bold = qvariant_cast<bool>(args[2]);
            bool italic = qvariant_cast<bool>(args[3]);
            module_->runSetFont(family, size, bold, italic);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        case 0x0023: {
            /* ellipse */
            int x = qvariant_cast<int>(args[0]);
            int y = qvariant_cast<int>(args[1]);
            int r1 = qvariant_cast<int>(args[2]);
            int r2 = qvariant_cast<int>(args[3]);
            module_->runEllipse(x, y, r1, r2);
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        
        default : {
            errorText_ = "Unknown method index";
            return ES_Error;
        }
    }
}

/* public */ Shared::ActorInterface::FunctionList PainterPlugin::functionList() const
{
    Shared::ActorInterface::FunctionList result;
    
    /* алг цвет CMYK(цел c, цел m, цел y, цел k) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("CMYK");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цвет CMYKA(цел c, цел m, цел y, цел k, цел a) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("CMYKA");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цвет HSL(цел h, цел s, цел l) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("HSL");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цвет HSLA(цел h, цел s, цел l, цел a) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("HSLA");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цвет HSV(цел h, цел s, цел v) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("HSV");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цвет HSVA(цел h, цел s, цел v, цел a) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("HSVA");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цвет RGB(цел r, цел g, цел b) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("RGB");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цвет RGBA(цел r, цел g, цел b, цел a) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("RGBA");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг в точку(цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("move to");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("в точку");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цел высота листа */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("page height");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("высота листа");
    result.last().returnType = Shared::ActorInterface::Int;
    
    /* алг загрузить лист(лит имя файла) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("load page");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("загрузить лист");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::String;
    result.last().arguments.last().dimension = 0u;
    
    /* алг залить(цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("fill");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("залить");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг кисть(цвет Цвет) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("set brush");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("кисть");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг линия(цел x0, цел y0, цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("line");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("линия");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг линия в точку(цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("line to");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("линия в точку");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг многоугольник(цел N, целтаб XX[0:0], целтаб YY[0:0]) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("polygon");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("многоугольник");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 1u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 1u;
    
    /* алг надпись(цел x, цел y, лит надпись) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("write");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("надпись");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::String;
    result.last().arguments.last().dimension = 0u;
    
    /* алг новый лист(цел ширина, цел высота, цвет фон) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("new page");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("новый лист");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг окружность(цел x, цел y, цел r) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("circle");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("окружность");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг перо(цел толщина, цвет цвет_) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("set pen");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("перо");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг пиксель(цел x, цел y, цвет цвет_) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("point");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("пиксель");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг плотность(цел значение) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("density");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("плотность");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг прямоугольник(цел x0, цел y0, цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("rectangle");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("прямоугольник");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг разложить в CMYK(цвет цвет_, рез цел c, рез цел m, рез цел y, рез цел k) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("split to CMYK");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("разложить в CMYK");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг разложить в HSL(цвет цвет_, рез цел h, рез цел s, рез цел l) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("split to HSL");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("разложить в HSL");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг разложить в HSV(цвет цвет_, рез цел h, рез цел s, рез цел v) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("split to HSV");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("разложить в HSV");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг разложить в RGB(цвет цвет_, рез цел r, рез цел g, рез цел b) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("split to RGB");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("разложить в RGB");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг сохранить лист(лит имя файла) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("save page");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("сохранить лист");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::String;
    result.last().arguments.last().dimension = 0u;
    
    /* алг убрать кисть */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("unset brush");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("убрать кисть");
    result.last().returnType = Shared::ActorInterface::Void;
    
    /* алг цвет значение в точке(цел x, цел y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("point sample");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("значение в точке");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг цел центр x */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("center x");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("центр x");
    result.last().returnType = Shared::ActorInterface::Int;
    
    /* алг цел центр y */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("center y");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("центр y");
    result.last().returnType = Shared::ActorInterface::Int;
    
    /* алг цел ширина листа */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("page width");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("ширина листа");
    result.last().returnType = Shared::ActorInterface::Int;
    
    /* алг цел ширина текста(лит текст) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("text width");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("ширина текста");
    result.last().returnType = Shared::ActorInterface::Int;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::String;
    result.last().arguments.last().dimension = 0u;
    
    /* алг шрифт(лит название, цел размер, лог жирный, лог курсив) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("set font");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("шрифт");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::String;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Bool;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Bool;
    result.last().arguments.last().dimension = 0u;
    
    /* алг эллипс(цел x, цел y, цел r1, цел r2) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("ellipse");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("эллипс");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    ;
    return result;
}

/* private slot */ void PainterPlugin::handleSettingsChangedCppImplementation(const QStringList & keys)
{
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* protected */ QString PainterPlugin::initialize(const QStringList &a, const ExtensionSystem::CommandLine &b)
{
    module_ = new PainterModule(this);
    
    return module_->initialize(a, b);
}

/* public */ bool PainterPlugin::isGuiRequired() const
{
    return true;
}

/* public */ bool PainterPlugin::isSafeToQuit()
{
    return module_->isSafeToQuit();
}

/* public slot */ void PainterPlugin::loadActorData(QIODevice * source)
{
    if (module_) {
        module_->loadActorData(source);
    }
}

/* public */ QString PainterPlugin::localizedModuleName(const QLocale::Language ) const
{
    // TODO non-Russian languages not implemented yet
    return QString::fromUtf8("Рисователь");
}

/* public */ QString PainterPlugin::mainIconName() const
{
    return QString::fromLatin1("painter");
}

/* public */ QWidget* PainterPlugin::mainWidget()
{
    return module_->mainWidget();
}

/* public */ QList<QMenu*> PainterPlugin::moduleMenus() const
{
    return module_->moduleMenus();
}

/* protected */ void PainterPlugin::msleep(unsigned long secs)
{
    //if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->amsleep(secs);
    //}
}

/* public */ void PainterPlugin::notifyGuiReady()
{
    module_->handleGuiReady();
}

/* public */ QString PainterPlugin::pultIconName() const
{
    return QString::fromLatin1("");
}

/* public */ QWidget* PainterPlugin::pultWidget()
{
    return module_->pultWidget();
}

/* public */ void PainterPlugin::reset()
{
    module_->reset();
}

/* public */ QVariant PainterPlugin::result() const
{
    return result_;
}

/* public */ void PainterPlugin::setAnimationEnabled(bool enabled)
{
    // The module might be not created at a time of call,
    // so check it propertly
    if (module_) {
        module_->setAnimationEnabled(enabled);
    }
}

/* public */ QWidget* PainterPlugin::settingsEditorPage()
{
    return settingsPage_;
}

/* protected */ void PainterPlugin::sleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->asleep(secs);
    }
}

/* public */ QVariantList PainterPlugin::templateParameters() const
{
    if (module_) {
        return module_->templateParameters();
    }
    else {
        return defaultTemplateParameters();
    }
}

/* public */ void PainterPlugin::terminateEvaluation()
{
    module_->terminateEvaluation();
}

/* public */ Shared::ActorInterface::TypeList PainterPlugin::typeList() const
{
    Shared::ActorInterface::TypeList result;
    
            
    return result;
}

/* private */ void PainterPlugin::updateSettings(const QStringList & keys)
{
    if (settingsPage_) {
        settingsPage_->setSettingsObject(mySettings());
    }
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* public */ QList<Shared::ActorInterface*> PainterPlugin::usesList() const
{
    static const QList<QByteArray> usesNames = QList<QByteArray>()
        << "Actor_Colorer" ;
    QList<Shared::ActorInterface*> result;
    Q_FOREACH (const QByteArray & name, usesNames) {
        ExtensionSystem::KPlugin * plugin = myDependency(name);
        Shared::ActorInterface * actor =
                qobject_cast<Shared::ActorInterface*>(plugin);
        result.push_back(actor);
    }
    return result;
}

/* protected */ void PainterPlugin::usleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->ausleep(secs);
    }
}



PainterAsyncRunThread::PainterAsyncRunThread(class PainterPlugin* plugin, class PainterModuleBase* module)
    : QThread(plugin)
    , index_(0)
    , args_(QVariantList())
    , plugin_(plugin)
    , module_(module)
{
}

/* public */ void PainterAsyncRunThread::amsleep(unsigned long secs)
{
    msleep(secs);
}

/* public */ void PainterAsyncRunThread::asleep(unsigned long secs)
{
    sleep(secs);
}

/* public */ void PainterAsyncRunThread::ausleep(unsigned long secs)
{
    usleep(secs);
}

/* public */ void PainterAsyncRunThread::init(quint32 index, const QVariantList & args)
{
    index_ = index;
    args_ = args;
}

/* private */ void PainterAsyncRunThread::run()
{
    switch (index_) {
        
        default: {
            plugin_->errorText_ = "Unknown method index";
        }
    }
}



} // namespace ActorPainter
#if QT_VERSION < 0x050000
Q_EXPORT_PLUGIN(ActorPainter::PainterPlugin)
#endif
