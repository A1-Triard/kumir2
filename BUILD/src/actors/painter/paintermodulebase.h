/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

#ifndef PAINTERMODULEBASE_H
#define PAINTERMODULEBASE_H

// Custom types declaration headers (if any)
#include "../_colorer/typecolor.h"


// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#if QT_VERSION >= 0x050000
#   include <QtWidgets>
#else
#   include <QtGui>
#endif

namespace ActorPainter {

typedef Actor_Colorer::Color Color;


class PainterModuleBase
    : public QObject
{
    Q_OBJECT
public /* methods */:
    PainterModuleBase(ExtensionSystem::KPlugin* parent);
    QList<QMenu*> moduleMenus() const;
    QDir myResourcesDir() const;
    ExtensionSystem::SettingsPtr mySettings() const;
    virtual QWidget* mainWidget() const = 0;
    virtual QWidget* pultWidget() const = 0;
    virtual void handleGuiReady();
    virtual QString initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters);
    virtual bool isSafeToQuit();
    virtual QVariantList templateParameters() const;
public Q_SLOTS:
    virtual void reset() = 0;
    virtual void reloadSettings(ExtensionSystem::SettingsPtr settings, const QStringList & keys) = 0;
    virtual void changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current) = 0;
    virtual void terminateEvaluation() = 0;
    virtual void setAnimationEnabled(bool enabled) = 0;
    virtual Color runCMYK(const int c, const int m, const int y, const int k) = 0;
    virtual Color runCMYKA(const int c, const int m, const int y, const int k, const int a) = 0;
    virtual Color runHSL(const int h, const int s, const int l) = 0;
    virtual Color runHSLA(const int h, const int s, const int l, const int a) = 0;
    virtual Color runHSV(const int h, const int s, const int v) = 0;
    virtual Color runHSVA(const int h, const int s, const int v, const int a) = 0;
    virtual Color runRGB(const int r, const int g, const int b) = 0;
    virtual Color runRGBA(const int r, const int g, const int b, const int a) = 0;
    virtual void runMoveTo(const int x, const int y) = 0;
    virtual int runPageHeight() = 0;
    virtual void runLoadPage(const QString& fileName) = 0;
    virtual void runFill(const int x, const int y) = 0;
    virtual void runSetBrush(const Color& colour) = 0;
    virtual void runLine(const int x0, const int y0, const int x, const int y) = 0;
    virtual void runLineTo(const int x, const int y) = 0;
    virtual void runPolygon(const int N, const QVector< int >& XX, const QVector< int >& YY) = 0;
    virtual void runWrite(const int x, const int y, const QString& text) = 0;
    virtual void runNewPage(const int width, const int height, const Color& background) = 0;
    virtual void runCircle(const int x, const int y, const int r) = 0;
    virtual void runSetPen(const int width, const Color& color_) = 0;
    virtual void runPoint(const int x, const int y, const Color& color_) = 0;
    virtual void runDensity(const int value) = 0;
    virtual void runRectangle(const int x0, const int y0, const int x, const int y) = 0;
    virtual void runSplitToCMYK(const Color& color_, int& c, int& m, int& y, int& k) = 0;
    virtual void runSplitToHSL(const Color& color_, int& h, int& s, int& l) = 0;
    virtual void runSplitToHSV(const Color& color_, int& h, int& s, int& v) = 0;
    virtual void runSplitToRGB(const Color& color_, int& r, int& g, int& b) = 0;
    virtual void runSavePage(const QString& fileName) = 0;
    virtual void runUnsetBrush() = 0;
    virtual Color runPointSample(const int x, const int y) = 0;
    virtual int runCenterX() = 0;
    virtual int runCenterY() = 0;
    virtual int runPageWidth() = 0;
    virtual int runTextWidth(const QString& text) = 0;
    virtual void runSetFont(const QString& family, const int size, const bool bold, const bool italic) = 0;
    virtual void runEllipse(const int x, const int y, const int r1, const int r2) = 0;
    virtual void loadActorData(QIODevice * source);
Q_SIGNALS:
    void notifyOnTemplateParametersChanged();


    /* ========= CLASS PRIVATE ========= */
protected /* methods */:
    const ExtensionSystem::CommandLine& commandLineParameters() const;
    void msleep(unsigned long msecs);
    void setError(const QString & errorText);
    void sleep(unsigned long secs);
    void usleep(unsigned long usecs);



protected /* fields */:
    QMenu* m_menuPainter;
    QAction* m_actionPainterNewPage;
    QAction* m_actionPainterLoadPage;
    QAction* m_actionPainterRevertPage;
    QAction* m_actionPainterSaveACopyAs;
    QAction* m_actionPainterScale100;
    QAction* m_actionPainterFitWidth;
    QAction* m_actionPainterFitHeight;
    QAction* m_actionPainterFitWindow;
    QAction* m_actionPainterColorInStatusBar;
    QAction* m_actionPainterColorInStatusBarRRGGBB;
    QAction* m_actionPainterColorInStatusBarRGB;
    QAction* m_actionPainterColorInStatusBarCMYK;
    QAction* m_actionPainterColorInStatusBarHSL;
    QAction* m_actionPainterColorInStatusBarHSV;

};
        

} // namespace ActorPainter

#endif // PAINTERMODULEBASE_H
