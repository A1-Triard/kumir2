/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

#ifndef KEYBOARDMODULEBASE_H
#define KEYBOARDMODULEBASE_H

// Custom types declaration headers (if any)
#include "typekeycode.h"


// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#if QT_VERSION >= 0x050000
#   include <QtWidgets>
#else
#   include <QtGui>
#endif

namespace ActorKeyboard {



class KeyboardModuleBase
    : public QObject
{
    Q_OBJECT
public /* methods */:
    KeyboardModuleBase(ExtensionSystem::KPlugin* parent);
    QList<QMenu*> moduleMenus() const;
    QDir myResourcesDir() const;
    ExtensionSystem::SettingsPtr mySettings() const;
    virtual QWidget* mainWidget() const = 0;
    virtual QWidget* pultWidget() const = 0;
    virtual void handleGuiReady();
    virtual QString initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters);
    virtual bool isSafeToQuit();
    virtual QVariantList templateParameters() const;
public Q_SLOTS:
    virtual void reset() = 0;
    virtual void reloadSettings(ExtensionSystem::SettingsPtr settings, const QStringList & keys) = 0;
    virtual void changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current) = 0;
    virtual void terminateEvaluation() = 0;
    virtual void setAnimationEnabled(bool enabled) = 0;
    virtual bool runKeyHit() = 0;
    virtual int runKeyCode() = 0;
    virtual void runClearKeyBuffer() = 0;
    virtual Keycode runOperatorINPUT(const QString& s, bool& ok) = 0;
    virtual QString runOperatorOUTPUT(const Keycode& x) = 0;
    virtual Keycode runOperatorASSIGN(const int x) = 0;
    virtual int runOperatorASSIGN(const Keycode& x) = 0;
    virtual bool runOperatorEQUAL(const Keycode& self, const Keycode& other) = 0;
    virtual bool runOperatorEQUAL(const Keycode& self, const int other) = 0;
    virtual bool runOperatorEQUAL(const int self, const Keycode& other) = 0;
    virtual bool runOperatorNOTEQUAL(const Keycode& self, const Keycode& other) = 0;
    virtual bool runOperatorNOTEQUAL(const Keycode& self, const int other) = 0;
    virtual bool runOperatorNOTEQUAL(const int self, const Keycode& other) = 0;
    virtual bool runOperatorLESS(const Keycode& self, const Keycode& other) = 0;
    virtual bool runOperatorLESS(const Keycode& self, const int other) = 0;
    virtual bool runOperatorLESS(const int self, const Keycode& other) = 0;
    virtual bool runOperatorGREATER(const Keycode& self, const Keycode& other) = 0;
    virtual bool runOperatorGREATER(const Keycode& self, const int other) = 0;
    virtual bool runOperatorGREATER(const int self, const Keycode& other) = 0;
    virtual int runOperatorPLUS(const Keycode& self, const Keycode& other) = 0;
    virtual int runOperatorPLUS(const int self, const Keycode& other) = 0;
    virtual int runOperatorPLUS(const Keycode& self, const int other) = 0;
    virtual int runOperatorMINUS(const Keycode& self, const Keycode& other) = 0;
    virtual int runOperatorMINUS(const int self, const Keycode& other) = 0;
    virtual int runOperatorMINUS(const Keycode& self, const int other) = 0;
    virtual int runOperatorASTERISK(const Keycode& self, const Keycode& other) = 0;
    virtual int runOperatorASTERISK(const int self, const Keycode& other) = 0;
    virtual int runOperatorASTERISK(const Keycode& self, const int other) = 0;
    virtual void loadActorData(QIODevice * source);
Q_SIGNALS:
    void notifyOnTemplateParametersChanged();


    /* ========= CLASS PRIVATE ========= */
protected /* methods */:
    const ExtensionSystem::CommandLine& commandLineParameters() const;
    void msleep(unsigned long msecs);
    void setError(const QString & errorText);
    void sleep(unsigned long secs);
    void usleep(unsigned long usecs);





};
        

} // namespace ActorKeyboard

#endif // KEYBOARDMODULEBASE_H
