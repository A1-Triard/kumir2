/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self includes
#include "keyboardmodulebase.h"
#include "keyboardplugin.h"

// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#include <QtGui>

namespace ActorKeyboard {

KeyboardModuleBase::KeyboardModuleBase(ExtensionSystem::KPlugin* parent)
    : QObject(parent)
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        static const QString currentLocaleName = QLocale().name();
        
        
    }
}

/* protected */ const ExtensionSystem::CommandLine& KeyboardModuleBase::commandLineParameters() const
{
    KeyboardPlugin * plugin = qobject_cast<KeyboardPlugin*>(parent());
    return plugin->commandLineParameters_;
}

/* public virtual */ void KeyboardModuleBase::handleGuiReady()
{
}

/* public virtual */ QString KeyboardModuleBase::initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters)
{
    Q_UNUSED(configurationParameters);
    Q_UNUSED(runtimeParameters);

    // Return error text or an empty string on successfull  initialization
    return QString();
}

/* public virtual */ bool KeyboardModuleBase::isSafeToQuit()
{
    return true;
}

/* public virtual slot */ void KeyboardModuleBase::loadActorData(QIODevice * source)
{
    Q_UNUSED(source);  // By default do nothing

}



/* public */ QList<QMenu*> KeyboardModuleBase::moduleMenus() const
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        QList<QMenu*> result;
        
        return result;
    }
    else {
        return QList<QMenu*>();
    }
}

/* protected */ void KeyboardModuleBase::msleep(unsigned long msecs)
{
    KeyboardPlugin* plugin = qobject_cast<KeyboardPlugin*>(parent());
    plugin->msleep(msecs);
}

/* public */ QDir KeyboardModuleBase::myResourcesDir() const
{
    KeyboardPlugin* plugin = qobject_cast<KeyboardPlugin*>(parent());
    return plugin->myResourcesDir();
}

/* public */ ExtensionSystem::SettingsPtr KeyboardModuleBase::mySettings() const
{
    KeyboardPlugin* plugin = qobject_cast<KeyboardPlugin*>(parent());
    return plugin->mySettings();
}





/* protected */ void KeyboardModuleBase::setError(const QString & errorText)
{
    KeyboardPlugin* plugin = qobject_cast<KeyboardPlugin*>(parent());
    plugin->errorText_ = errorText;
}

/* protected */ void KeyboardModuleBase::sleep(unsigned long secs)
{
    KeyboardPlugin* plugin = qobject_cast<KeyboardPlugin*>(parent());
    plugin->sleep(secs);
}

/* public virtual */ QVariantList KeyboardModuleBase::templateParameters() const
{
    KeyboardPlugin * plugin = qobject_cast<KeyboardPlugin*>(parent());
    return plugin->defaultTemplateParameters();
}

/* protected */ void KeyboardModuleBase::usleep(unsigned long usecs)
{
    KeyboardPlugin* plugin = qobject_cast<KeyboardPlugin*>(parent());
    plugin->usleep(usecs);
}



} // namespace ActorKeyboard
