/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self include
#include "complexnumbersplugin.h"
#include "complexnumbersmodulebase.h"
#include "complexnumbersmodule.h"

namespace ActorComplexNumbers {


QVariant encode(const Complex & record) {
    QVariantList result;
    result << QVariant(record.re);
    result << QVariant(record.im);

    return result;
}

Complex decode(const QVariant & raw) {
    Complex result;
    const QVariantList alist = raw.toList();
    result.re = alist.size() > 0 ? alist.at(0).toDouble() : 0.0;
    result.im = alist.size() > 1 ? alist.at(1).toDouble() : 0.0;

    return result;
}
            


ComplexNumbersPlugin::ComplexNumbersPlugin()
    : ExtensionSystem::KPlugin()
    , module_(nullptr)
    , asyncRunThread_(nullptr)
    , settingsPage_(nullptr)
{
    bool hasGuiThread = true;
#ifdef Q_OS_LINUX
    hasGuiThread = getenv("DISPLAY") != 0;
#endif
    QObject::connect(
        this, SIGNAL(asyncRun(quint32,QVariantList)),
        this, SLOT(asyncEvaluate(quint32,QVariantList)),
        //hasGuiThread? Qt::QueuedConnection :
        Qt::DirectConnection
    );
}

/* protected */ QList<ExtensionSystem::CommandLineParameter> ComplexNumbersPlugin::acceptableCommandLineParameters() const
{
    return ComplexNumbersModule::acceptableCommandLineParameters();
}

/* public */ QVariantList ComplexNumbersPlugin::algOptResults() const
{
    return optResults_;
}

/* public */ QByteArray ComplexNumbersPlugin::asciiModuleName() const
{
    return QByteArray("Complex numbers");
}

/* private slot */ void ComplexNumbersPlugin::asyncEvaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        
        default : {
            errorText_ = "Unknown method index for async evaluation";
        }
    }
    Q_EMIT sync();
}

/* protected */ void ComplexNumbersPlugin::changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current)
{
    module_->changeGlobalState(old, current);
}

/* public */ void ComplexNumbersPlugin::connectSync(QObject* receiver, const char* method)
{
    QObject::connect(this, SIGNAL(sync()), receiver, method, Qt::DirectConnection);
}

/* protected */ void ComplexNumbersPlugin::createPluginSpec()
{
    _pluginSpec.name = "ActorComplexNumbers";
    _pluginSpec.gui = isGuiRequired();
}

/* public */ QVariant ComplexNumbersPlugin::customValueFromString(const QByteArray & clazz, const QString & stringg) const
{
    QVariant result;
    if (clazz==QByteArray("complex")) {
        Complex x; bool ok = false;
        x = module_->runOperatorINPUT(stringg, ok);
        if (ok) {
            result = encode(x);
        }
    }

    return result;
}

/* public */ QString ComplexNumbersPlugin::customValueToString(const QByteArray & clazz, const QVariant & value) const
{
    QString result;
    if (clazz==QByteArray("complex")) {
        Complex x = decode(value);
        result = module_->runOperatorOUTPUT(x);
    }

    return result;
}

/* public */ QVariantList ComplexNumbersPlugin::defaultTemplateParameters() const
{
    QVariantList result;
    return result;
}

/* public */ QString ComplexNumbersPlugin::errorText() const
{
    return errorText_;
}

/* public */ Shared::EvaluationStatus ComplexNumbersPlugin::evaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        case 0x0000: {
            /* Re */
            Complex x = decode(args[0]);
            result_ = QVariant::fromValue(module_->runRe(x));
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0001: {
            /* Im */
            Complex x = decode(args[0]);
            result_ = QVariant::fromValue(module_->runIm(x));
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0002: {
            /* + */
            Complex x = decode(args[0]);
            Complex y = decode(args[1]);
            result_ = encode(module_->runOperatorPLUS(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0003: {
            /* - */
            Complex x = decode(args[0]);
            Complex y = decode(args[1]);
            result_ = encode(module_->runOperatorMINUS(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0004: {
            /* * */
            Complex x = decode(args[0]);
            Complex y = decode(args[1]);
            result_ = encode(module_->runOperatorASTERISK(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0005: {
            /* / */
            Complex x = decode(args[0]);
            Complex y = decode(args[1]);
            result_ = encode(module_->runOperatorSLASH(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0006: {
            /* := */
            int x = qvariant_cast<int>(args[0]);
            result_ = encode(module_->runOperatorASSIGN(x));
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0007: {
            /* := */
            qreal x = qvariant_cast<qreal>(args[0]);
            result_ = encode(module_->runOperatorASSIGN(x));
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0008: {
            /* input */
            QString x = qvariant_cast<QString>(args[0]);
            bool ok = qvariant_cast<bool>(args[1]);
            result_ = encode(module_->runOperatorINPUT(x, ok));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::fromValue(ok);
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackRezResult;
            break;
        }
        
        case 0x0009: {
            /* output */
            Complex x = decode(args[0]);
            result_ = QVariant::fromValue(module_->runOperatorOUTPUT(x));
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        
        default : {
            errorText_ = "Unknown method index";
            return ES_Error;
        }
    }
}

/* public */ Shared::ActorInterface::FunctionList ComplexNumbersPlugin::functionList() const
{
    Shared::ActorInterface::FunctionList result;
    
    /* алг вещ Re(компл x) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("Re");
    result.last().returnType = Shared::ActorInterface::Real;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг вещ Im(компл x) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("Im");
    result.last().returnType = Shared::ActorInterface::Real;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг компл +(компл x, компл y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("+");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг компл -(компл x, компл y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("-");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг компл *(компл x, компл y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("*");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг компл /(компл x, компл y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("/");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг компл :=(цел x) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray(":=");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг компл :=(вещ x) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray(":=");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Real;
    result.last().arguments.last().dimension = 0u;
    
    /* алг компл ввод(лит x, рез лог ok) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("input");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("ввод");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::String;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Bool;
    result.last().arguments.last().dimension = 0u;
    
    /* алг лит вывод(компл x) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("output");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("вывод");
    result.last().returnType = Shared::ActorInterface::String;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    ;
    return result;
}

/* private slot */ void ComplexNumbersPlugin::handleSettingsChangedCppImplementation(const QStringList & keys)
{
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* protected */ QString ComplexNumbersPlugin::initialize(const QStringList &a, const ExtensionSystem::CommandLine &b)
{
    module_ = new ComplexNumbersModule(this);
    
    return module_->initialize(a, b);
}

/* public */ bool ComplexNumbersPlugin::isGuiRequired() const
{
    return false;
}

/* public */ bool ComplexNumbersPlugin::isSafeToQuit()
{
    return module_->isSafeToQuit();
}

/* public slot */ void ComplexNumbersPlugin::loadActorData(QIODevice * source)
{
    if (module_) {
        module_->loadActorData(source);
    }
}

/* public */ QString ComplexNumbersPlugin::localizedModuleName(const QLocale::Language ) const
{
    // TODO non-Russian languages not implemented yet
    return QString::fromUtf8("Комплексные числа");
}

/* public */ QString ComplexNumbersPlugin::mainIconName() const
{
    return QString::fromLatin1("");
}

/* public */ QWidget* ComplexNumbersPlugin::mainWidget()
{
    return module_->mainWidget();
}

/* public */ QList<QMenu*> ComplexNumbersPlugin::moduleMenus() const
{
    return module_->moduleMenus();
}

/* protected */ void ComplexNumbersPlugin::msleep(unsigned long secs)
{
    //if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->amsleep(secs);
    //}
}



/* public */ QString ComplexNumbersPlugin::pultIconName() const
{
    return QString::fromLatin1("");
}

/* public */ QWidget* ComplexNumbersPlugin::pultWidget()
{
    return module_->pultWidget();
}

/* public */ void ComplexNumbersPlugin::reset()
{
    module_->reset();
}

/* public */ QVariant ComplexNumbersPlugin::result() const
{
    return result_;
}

/* public */ void ComplexNumbersPlugin::setAnimationEnabled(bool enabled)
{
    // The module might be not created at a time of call,
    // so check it propertly
    if (module_) {
        module_->setAnimationEnabled(enabled);
    }
}

/* public */ QWidget* ComplexNumbersPlugin::settingsEditorPage()
{
    return settingsPage_;
}

/* protected */ void ComplexNumbersPlugin::sleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->asleep(secs);
    }
}

/* public */ QVariantList ComplexNumbersPlugin::templateParameters() const
{
    if (module_) {
        return module_->templateParameters();
    }
    else {
        return defaultTemplateParameters();
    }
}

/* public */ void ComplexNumbersPlugin::terminateEvaluation()
{
    module_->terminateEvaluation();
}

/* public */ Shared::ActorInterface::TypeList ComplexNumbersPlugin::typeList() const
{
    Shared::ActorInterface::TypeList result;
    
            {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("re"), Shared::ActorInterface::Real));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("im"), Shared::ActorInterface::Real));
        recordSpec.asciiName = QByteArray("complex");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("компл");
        result.push_back(recordSpec);
    }
    
    return result;
}

/* private */ void ComplexNumbersPlugin::updateSettings(const QStringList & keys)
{
    if (settingsPage_) {
        settingsPage_->setSettingsObject(mySettings());
    }
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* public */ QList<Shared::ActorInterface*> ComplexNumbersPlugin::usesList() const
{
    static const QList<Shared::ActorInterface*> empty = QList<Shared::ActorInterface*>();
    return empty;
}

/* protected */ void ComplexNumbersPlugin::usleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->ausleep(secs);
    }
}



ComplexNumbersAsyncRunThread::ComplexNumbersAsyncRunThread(class ComplexNumbersPlugin* plugin, class ComplexNumbersModuleBase* module)
    : QThread(plugin)
    , index_(0)
    , args_(QVariantList())
    , plugin_(plugin)
    , module_(module)
{
}

/* public */ void ComplexNumbersAsyncRunThread::amsleep(unsigned long secs)
{
    msleep(secs);
}

/* public */ void ComplexNumbersAsyncRunThread::asleep(unsigned long secs)
{
    sleep(secs);
}

/* public */ void ComplexNumbersAsyncRunThread::ausleep(unsigned long secs)
{
    usleep(secs);
}

/* public */ void ComplexNumbersAsyncRunThread::init(quint32 index, const QVariantList & args)
{
    index_ = index;
    args_ = args;
}

/* private */ void ComplexNumbersAsyncRunThread::run()
{
    switch (index_) {
        
        default: {
            plugin_->errorText_ = "Unknown method index";
        }
    }
}



} // namespace ActorComplexNumbers
#if QT_VERSION < 0x050000
Q_EXPORT_PLUGIN(ActorComplexNumbers::ComplexNumbersPlugin)
#endif
