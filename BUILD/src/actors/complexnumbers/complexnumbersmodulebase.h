/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

#ifndef COMPLEXNUMBERSMODULEBASE_H
#define COMPLEXNUMBERSMODULEBASE_H

// Custom types declaration headers (if any)
#include "typecomplex.h"


// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#if QT_VERSION >= 0x050000
#   include <QtWidgets>
#else
#   include <QtGui>
#endif

namespace ActorComplexNumbers {



class ComplexNumbersModuleBase
    : public QObject
{
    Q_OBJECT
public /* methods */:
    ComplexNumbersModuleBase(ExtensionSystem::KPlugin* parent);
    QWidget* mainWidget() const;
    QList<QMenu*> moduleMenus() const;
    QDir myResourcesDir() const;
    ExtensionSystem::SettingsPtr mySettings() const;
    QWidget* pultWidget() const;
    virtual void handleGuiReady();
    virtual QString initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters);
    virtual bool isSafeToQuit();
    virtual QVariantList templateParameters() const;
public Q_SLOTS:
    virtual void reset() = 0;
    virtual void reloadSettings(ExtensionSystem::SettingsPtr settings, const QStringList & keys) = 0;
    virtual void changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current) = 0;
    virtual void terminateEvaluation() = 0;
    virtual qreal runRe(const Complex& x) = 0;
    virtual qreal runIm(const Complex& x) = 0;
    virtual Complex runOperatorPLUS(const Complex& x, const Complex& y) = 0;
    virtual Complex runOperatorMINUS(const Complex& x, const Complex& y) = 0;
    virtual Complex runOperatorASTERISK(const Complex& x, const Complex& y) = 0;
    virtual Complex runOperatorSLASH(const Complex& x, const Complex& y) = 0;
    virtual Complex runOperatorASSIGN(const int x) = 0;
    virtual Complex runOperatorASSIGN(const qreal x) = 0;
    virtual Complex runOperatorINPUT(const QString& x, bool& ok) = 0;
    virtual QString runOperatorOUTPUT(const Complex& x) = 0;
    virtual void loadActorData(QIODevice * source);
    virtual void setAnimationEnabled(bool enabled);
Q_SIGNALS:
    void notifyOnTemplateParametersChanged();


    /* ========= CLASS PRIVATE ========= */
protected /* methods */:
    const ExtensionSystem::CommandLine& commandLineParameters() const;
    void msleep(unsigned long msecs);
    void setError(const QString & errorText);
    void sleep(unsigned long secs);
    void usleep(unsigned long usecs);





};
        

} // namespace ActorComplexNumbers

#endif // COMPLEXNUMBERSMODULEBASE_H
