/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self include
#include "_colorerplugin.h"
#include "_colorermodulebase.h"
#include "_colorermodule.h"

namespace Actor_Colorer {


QVariant encode(const Color & record) {
    QVariantList result;
    result << QVariant(record.r);
    result << QVariant(record.g);
    result << QVariant(record.b);
    result << QVariant(record.a);

    return result;
}

Color decode(const QVariant & raw) {
    Color result;
    const QVariantList alist = raw.toList();
    result.r = alist.size() > 0 ? alist.at(0).toInt() : 0;
    result.g = alist.size() > 1 ? alist.at(1).toInt() : 0;
    result.b = alist.size() > 2 ? alist.at(2).toInt() : 0;
    result.a = alist.size() > 3 ? alist.at(3).toInt() : 0;

    return result;
}
            


_ColorerPlugin::_ColorerPlugin()
    : ExtensionSystem::KPlugin()
    , module_(nullptr)
    , asyncRunThread_(nullptr)
    , settingsPage_(nullptr)
{
    bool hasGuiThread = true;
#ifdef Q_OS_LINUX
    hasGuiThread = getenv("DISPLAY") != 0;
#endif
    QObject::connect(
        this, SIGNAL(asyncRun(quint32,QVariantList)),
        this, SLOT(asyncEvaluate(quint32,QVariantList)),
        //hasGuiThread? Qt::QueuedConnection :
        Qt::DirectConnection
    );
}

/* protected */ QList<ExtensionSystem::CommandLineParameter> _ColorerPlugin::acceptableCommandLineParameters() const
{
    return _ColorerModule::acceptableCommandLineParameters();
}

/* public */ QVariantList _ColorerPlugin::algOptResults() const
{
    return optResults_;
}

/* public */ QByteArray _ColorerPlugin::asciiModuleName() const
{
    return QByteArray("_Colorer");
}

/* private slot */ void _ColorerPlugin::asyncEvaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        
        default : {
            errorText_ = "Unknown method index for async evaluation";
        }
    }
    Q_EMIT sync();
}

/* protected */ void _ColorerPlugin::changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current)
{
    module_->changeGlobalState(old, current);
}

/* public */ void _ColorerPlugin::connectSync(QObject* receiver, const char* method)
{
    QObject::connect(this, SIGNAL(sync()), receiver, method, Qt::DirectConnection);
}

/* protected */ void _ColorerPlugin::createPluginSpec()
{
    _pluginSpec.name = "Actor_Colorer";
    _pluginSpec.gui = isGuiRequired();
}

/* public */ QVariant _ColorerPlugin::customValueFromString(const QByteArray & clazz, const QString & stringg) const
{
    QVariant result;
    if (clazz==QByteArray("color")) {
        Color x; bool ok = false;
        x = module_->runOperatorINPUT(stringg, ok);
        if (ok) {
            result = encode(x);
        }
    }

    return result;
}

/* public */ QString _ColorerPlugin::customValueToString(const QByteArray & clazz, const QVariant & value) const
{
    QString result;
    if (clazz==QByteArray("color")) {
        Color x = decode(value);
        result = module_->runOperatorOUTPUT(x);
    }

    return result;
}

/* public */ QVariantList _ColorerPlugin::defaultTemplateParameters() const
{
    QVariantList result;
    return result;
}

/* public */ QString _ColorerPlugin::errorText() const
{
    return errorText_;
}

/* public */ Shared::EvaluationStatus _ColorerPlugin::evaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        case 0x0000: {
            /* input */
            QString x = qvariant_cast<QString>(args[0]);
            bool ok = qvariant_cast<bool>(args[1]);
            result_ = encode(module_->runOperatorINPUT(x, ok));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::fromValue(ok);
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackRezResult;
            break;
        }
        
        case 0x0001: {
            /* output */
            Color x = decode(args[0]);
            result_ = QVariant::fromValue(module_->runOperatorOUTPUT(x));
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0002: {
            /* = */
            Color x = decode(args[0]);
            Color y = decode(args[1]);
            result_ = QVariant::fromValue(module_->runOperatorEQUAL(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        case 0x0003: {
            /* <> */
            Color x = decode(args[0]);
            Color y = decode(args[1]);
            result_ = QVariant::fromValue(module_->runOperatorNOTEQUAL(x, y));
            optResults_ << QVariant::Invalid;
            optResults_ << QVariant::Invalid;
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_StackResult;
            break;
        }
        
        
        default : {
            errorText_ = "Unknown method index";
            return ES_Error;
        }
    }
}

/* public */ Shared::ActorInterface::FunctionList _ColorerPlugin::functionList() const
{
    Shared::ActorInterface::FunctionList result;
    
    /* алг цвет ввод(лит x, рез лог ok) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("input");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("ввод");
    result.last().returnType = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().returnTypeSpecification = recordSpec;
    }
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::String;
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::OutArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Bool;
    result.last().arguments.last().dimension = 0u;
    
    /* алг лит вывод(цвет x) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("output");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("вывод");
    result.last().returnType = Shared::ActorInterface::String;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг лог =(цвет x, цвет y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("=");
    result.last().returnType = Shared::ActorInterface::Bool;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    
    /* алг лог <>(цвет x, цвет y) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("<>");
    result.last().returnType = Shared::ActorInterface::Bool;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::RecordType;
    {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.last().arguments.last().typeSpecification = recordSpec;
    }
    result.last().arguments.last().dimension = 0u;
    ;
    return result;
}

/* private slot */ void _ColorerPlugin::handleSettingsChangedCppImplementation(const QStringList & keys)
{
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* protected */ QString _ColorerPlugin::initialize(const QStringList &a, const ExtensionSystem::CommandLine &b)
{
    module_ = new _ColorerModule(this);
    
    return module_->initialize(a, b);
}

/* public */ bool _ColorerPlugin::isGuiRequired() const
{
    return false;
}

/* public */ bool _ColorerPlugin::isSafeToQuit()
{
    return module_->isSafeToQuit();
}

/* public slot */ void _ColorerPlugin::loadActorData(QIODevice * source)
{
    if (module_) {
        module_->loadActorData(source);
    }
}

/* public */ QString _ColorerPlugin::localizedModuleName(const QLocale::Language ) const
{
    // TODO non-Russian languages not implemented yet
    return QString::fromUtf8("_Цветник");
}

/* public */ QString _ColorerPlugin::mainIconName() const
{
    return QString::fromLatin1("");
}

/* public */ QWidget* _ColorerPlugin::mainWidget()
{
    return module_->mainWidget();
}

/* public */ QList<QMenu*> _ColorerPlugin::moduleMenus() const
{
    return module_->moduleMenus();
}

/* protected */ void _ColorerPlugin::msleep(unsigned long secs)
{
    //if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->amsleep(secs);
    //}
}



/* public */ QString _ColorerPlugin::pultIconName() const
{
    return QString::fromLatin1("");
}

/* public */ QWidget* _ColorerPlugin::pultWidget()
{
    return module_->pultWidget();
}

/* public */ void _ColorerPlugin::reset()
{
    module_->reset();
}

/* public */ QVariant _ColorerPlugin::result() const
{
    return result_;
}

/* public */ void _ColorerPlugin::setAnimationEnabled(bool enabled)
{
    // The module might be not created at a time of call,
    // so check it propertly
    if (module_) {
        module_->setAnimationEnabled(enabled);
    }
}

/* public */ QWidget* _ColorerPlugin::settingsEditorPage()
{
    return settingsPage_;
}

/* protected */ void _ColorerPlugin::sleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->asleep(secs);
    }
}

/* public */ QVariantList _ColorerPlugin::templateParameters() const
{
    if (module_) {
        return module_->templateParameters();
    }
    else {
        return defaultTemplateParameters();
    }
}

/* public */ void _ColorerPlugin::terminateEvaluation()
{
    module_->terminateEvaluation();
}

/* public */ Shared::ActorInterface::TypeList _ColorerPlugin::typeList() const
{
    Shared::ActorInterface::TypeList result;
    
            {
        Shared::ActorInterface::RecordSpecification recordSpec;
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("r"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("g"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("b"), Shared::ActorInterface::Int));
        recordSpec.record.push_back(Shared::ActorInterface::Field(QByteArray("a"), Shared::ActorInterface::Int));
        recordSpec.asciiName = QByteArray("color");
         recordSpec.localizedNames[QLocale::Russian] = QString::fromUtf8("цвет");
        result.push_back(recordSpec);
    }
    
    return result;
}

/* private */ void _ColorerPlugin::updateSettings(const QStringList & keys)
{
    if (settingsPage_) {
        settingsPage_->setSettingsObject(mySettings());
    }
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* public */ QList<Shared::ActorInterface*> _ColorerPlugin::usesList() const
{
    static const QList<Shared::ActorInterface*> empty = QList<Shared::ActorInterface*>();
    return empty;
}

/* protected */ void _ColorerPlugin::usleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->ausleep(secs);
    }
}



_ColorerAsyncRunThread::_ColorerAsyncRunThread(class _ColorerPlugin* plugin, class _ColorerModuleBase* module)
    : QThread(plugin)
    , index_(0)
    , args_(QVariantList())
    , plugin_(plugin)
    , module_(module)
{
}

/* public */ void _ColorerAsyncRunThread::amsleep(unsigned long secs)
{
    msleep(secs);
}

/* public */ void _ColorerAsyncRunThread::asleep(unsigned long secs)
{
    sleep(secs);
}

/* public */ void _ColorerAsyncRunThread::ausleep(unsigned long secs)
{
    usleep(secs);
}

/* public */ void _ColorerAsyncRunThread::init(quint32 index, const QVariantList & args)
{
    index_ = index;
    args_ = args;
}

/* private */ void _ColorerAsyncRunThread::run()
{
    switch (index_) {
        
        default: {
            plugin_->errorText_ = "Unknown method index";
        }
    }
}



} // namespace Actor_Colorer
#if QT_VERSION < 0x050000
Q_EXPORT_PLUGIN(Actor_Colorer::_ColorerPlugin)
#endif
