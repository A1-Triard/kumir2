/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self includes
#include "grasshoppermodulebase.h"
#include "grasshopperplugin.h"

// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#include <QtGui>

namespace ActorGrasshopper {

GrasshopperModuleBase::GrasshopperModuleBase(ExtensionSystem::KPlugin* parent)
    : QObject(parent)
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        static const QString currentLocaleName = QLocale().name();
        
        m_menuGrasshopper = new QMenu();
        if (currentLocaleName=="ru_RU") {
            m_menuGrasshopper->setTitle(QString::fromUtf8("Кузнечик"));
        }
        else {
            m_menuGrasshopper->setTitle(QString::fromLatin1("Grasshopper"));
        }
        
        m_actionGrasshopperNewEnvironment = m_menuGrasshopper->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionGrasshopperNewEnvironment->setText(QString::fromUtf8("Новое задание..."));
        }
        else {
            m_actionGrasshopperNewEnvironment->setText(QString::fromLatin1("New Environment..."));
        }
        
        m_actionGrasshopperLoadEnvironment = m_menuGrasshopper->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionGrasshopperLoadEnvironment->setText(QString::fromUtf8("Загрузить задание..."));
        }
        else {
            m_actionGrasshopperLoadEnvironment->setText(QString::fromLatin1("Load Environment..."));
        }
        
        m_actionGrasshopperSave = m_menuGrasshopper->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionGrasshopperSave->setText(QString::fromUtf8("Сохранить..."));
        }
        else {
            m_actionGrasshopperSave->setText(QString::fromLatin1("Save"));
        }
        
        
    }
}

/* protected */ const ExtensionSystem::CommandLine& GrasshopperModuleBase::commandLineParameters() const
{
    GrasshopperPlugin * plugin = qobject_cast<GrasshopperPlugin*>(parent());
    return plugin->commandLineParameters_;
}

/* public virtual */ void GrasshopperModuleBase::handleGuiReady()
{
}

/* public virtual */ QString GrasshopperModuleBase::initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters)
{
    Q_UNUSED(configurationParameters);
    Q_UNUSED(runtimeParameters);

    // Return error text or an empty string on successfull  initialization
    return QString();
}

/* public virtual */ bool GrasshopperModuleBase::isSafeToQuit()
{
    return true;
}

/* public virtual slot */ void GrasshopperModuleBase::loadActorData(QIODevice * source)
{
    Q_UNUSED(source);  // By default do nothing

}



/* public */ QList<QMenu*> GrasshopperModuleBase::moduleMenus() const
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        QList<QMenu*> result;
        result.push_back(m_menuGrasshopper);
        
        return result;
    }
    else {
        return QList<QMenu*>();
    }
}

/* protected */ void GrasshopperModuleBase::msleep(unsigned long msecs)
{
    GrasshopperPlugin* plugin = qobject_cast<GrasshopperPlugin*>(parent());
    plugin->msleep(msecs);
}

/* public */ QDir GrasshopperModuleBase::myResourcesDir() const
{
    GrasshopperPlugin* plugin = qobject_cast<GrasshopperPlugin*>(parent());
    return plugin->myResourcesDir();
}

/* public */ ExtensionSystem::SettingsPtr GrasshopperModuleBase::mySettings() const
{
    GrasshopperPlugin* plugin = qobject_cast<GrasshopperPlugin*>(parent());
    return plugin->mySettings();
}





/* protected */ void GrasshopperModuleBase::setError(const QString & errorText)
{
    GrasshopperPlugin* plugin = qobject_cast<GrasshopperPlugin*>(parent());
    plugin->errorText_ = errorText;
}

/* protected */ void GrasshopperModuleBase::sleep(unsigned long secs)
{
    GrasshopperPlugin* plugin = qobject_cast<GrasshopperPlugin*>(parent());
    plugin->sleep(secs);
}

/* public virtual */ QVariantList GrasshopperModuleBase::templateParameters() const
{
    GrasshopperPlugin * plugin = qobject_cast<GrasshopperPlugin*>(parent());
    return plugin->defaultTemplateParameters();
}

/* protected */ void GrasshopperModuleBase::usleep(unsigned long usecs)
{
    GrasshopperPlugin* plugin = qobject_cast<GrasshopperPlugin*>(parent());
    plugin->usleep(usecs);
}



} // namespace ActorGrasshopper
