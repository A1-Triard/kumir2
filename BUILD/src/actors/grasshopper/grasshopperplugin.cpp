/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self include
#include "grasshopperplugin.h"
#include "grasshoppermodulebase.h"
#include "grasshoppermodule.h"

namespace ActorGrasshopper {



GrasshopperPlugin::GrasshopperPlugin()
    : ExtensionSystem::KPlugin()
    , module_(nullptr)
    , asyncRunThread_(nullptr)
    , settingsPage_(nullptr)
{
    bool hasGuiThread = true;
#ifdef Q_OS_LINUX
    hasGuiThread = getenv("DISPLAY") != 0;
#endif
    QObject::connect(
        this, SIGNAL(asyncRun(quint32,QVariantList)),
        this, SLOT(asyncEvaluate(quint32,QVariantList)),
        //hasGuiThread? Qt::QueuedConnection :
        Qt::DirectConnection
    );
}

/* protected */ QList<ExtensionSystem::CommandLineParameter> GrasshopperPlugin::acceptableCommandLineParameters() const
{
    return GrasshopperModule::acceptableCommandLineParameters();
}

/* public */ QVariantList GrasshopperPlugin::algOptResults() const
{
    return optResults_;
}

/* public */ QByteArray GrasshopperPlugin::asciiModuleName() const
{
    return QByteArray("Grasshopper");
}

/* private slot */ void GrasshopperPlugin::asyncEvaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        case 0x0000: {
            /* go forward %1 */
            int distance = qvariant_cast<int>(args[0]);
            module_->runGoForward(distance);
            optResults_ << QVariant::Invalid;
            break;
        }
        
        case 0x0001: {
            /* go backward %2 */
            int distance = qvariant_cast<int>(args[0]);
            module_->runGoBackward(distance);
            optResults_ << QVariant::Invalid;
            break;
        }
        
        
        default : {
            errorText_ = "Unknown method index for async evaluation";
        }
    }
    Q_EMIT sync();
}

/* protected */ void GrasshopperPlugin::changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current)
{
    module_->changeGlobalState(old, current);
}

/* public */ void GrasshopperPlugin::connectSync(QObject* receiver, const char* method)
{
    QObject::connect(this, SIGNAL(sync()), receiver, method, Qt::DirectConnection);
}

/* protected */ void GrasshopperPlugin::createPluginSpec()
{
    _pluginSpec.name = "ActorGrasshopper";
    _pluginSpec.gui = isGuiRequired();
}

/* public */ QVariant GrasshopperPlugin::customValueFromString(const QByteArray & , const QString & ) const
{
    QVariant result;

    return result;
}

/* public */ QString GrasshopperPlugin::customValueToString(const QByteArray & , const QVariant & ) const
{
    QString result;

    return result;
}

/* public */ QVariantList GrasshopperPlugin::defaultTemplateParameters() const
{
    QVariantList result;
    result.append(QVariant(3));
    result.append(QVariant(5));
    return result;
}

/* public */ QString GrasshopperPlugin::errorText() const
{
    return errorText_;
}

/* public */ Shared::EvaluationStatus GrasshopperPlugin::evaluate(quint32 index, const QVariantList & args)
{
    using namespace Shared;
    errorText_.clear();
    result_ = QVariant::Invalid;
    optResults_.clear();
    switch (index) {
        case 0x0000: {
            /* go forward %1 */
            Q_EMIT asyncRun(index, args);
            return ES_Async;
            break;
        }
        
        case 0x0001: {
            /* go backward %2 */
            Q_EMIT asyncRun(index, args);
            return ES_Async;
            break;
        }
        
        case 0x0002: {
            /* do repaint */
            module_->runDoRepaint();
            if (errorText_.length() > 0) {
                return ES_Error;
            }
            return ES_NoResult;
            break;
        }
        
        
        default : {
            errorText_ = "Unknown method index";
            return ES_Error;
        }
    }
}

/* public */ Shared::ActorInterface::FunctionList GrasshopperPlugin::functionList() const
{
    Shared::ActorInterface::FunctionList result;
    
    /* алг вперед %1(цел distance) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("go forward %1");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("вперед %1");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг назад %2(цел distance) */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("go backward %2");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("назад %2");
    result.last().returnType = Shared::ActorInterface::Void;
    result.last().arguments.push_back(Shared::ActorInterface::Argument());
    result.last().arguments.last().accessType = Shared::ActorInterface::InArgument;
    result.last().arguments.last().type = Shared::ActorInterface::Int;
    result.last().arguments.last().dimension = 0u;
    
    /* алг перекрасить */
    result.push_back(Shared::ActorInterface::Function());
    result.last().id = result.size() - 1;
    result.last().accessType = Shared::ActorInterface::PublicFunction;
    result.last().asciiName = QByteArray("do repaint");
    result.last().localizedNames[QLocale::Russian] = QString::fromUtf8("перекрасить");
    result.last().returnType = Shared::ActorInterface::Void;
    ;
    return result;
}

/* private slot */ void GrasshopperPlugin::handleSettingsChangedCppImplementation(const QStringList & keys)
{
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* protected */ QString GrasshopperPlugin::initialize(const QStringList &a, const ExtensionSystem::CommandLine &b)
{
    module_ = new GrasshopperModule(this);
    QMap<QString,Widgets::DeclarativeSettingsPage::Entry> entries;
    
    {
        Widgets::DeclarativeSettingsPage::Entry entry;
        entry.title = QString::fromUtf8("Цвет фона");  // TODO non-Russian language support
        entry.type = Widgets::DeclarativeSettingsPage::Color;
        entry.defaultValue = QString::fromUtf8("#green");
        entry.minimumValue = QVariant::Invalid;
        entry.maximumValue = QVariant::Invalid;
        entry.displayOrder = 99999999;
        entries["BackgroundColor"] = entry;
    }
            
    {
        Widgets::DeclarativeSettingsPage::Entry entry;
        entry.title = QString::fromUtf8("Цвет кузнечика");  // TODO non-Russian language support
        entry.type = Widgets::DeclarativeSettingsPage::Color;
        entry.defaultValue = QString::fromUtf8("#white");
        entry.minimumValue = QVariant::Invalid;
        entry.maximumValue = QVariant::Invalid;
        entry.displayOrder = 99999999;
        entries["GrasshopperColor"] = entry;
    }
            
    {
        Widgets::DeclarativeSettingsPage::Entry entry;
        entry.title = QString::fromUtf8("Цвет линейки");  // TODO non-Russian language support
        entry.type = Widgets::DeclarativeSettingsPage::Color;
        entry.defaultValue = QString::fromUtf8("#white");
        entry.minimumValue = QVariant::Invalid;
        entry.maximumValue = QVariant::Invalid;
        entry.displayOrder = 99999999;
        entries["RulerColor"] = entry;
    }
            
    {
        Widgets::DeclarativeSettingsPage::Entry entry;
        entry.title = QString::fromUtf8("Цвет следа");  // TODO non-Russian language support
        entry.type = Widgets::DeclarativeSettingsPage::Color;
        entry.defaultValue = QString::fromUtf8("#gray");
        entry.minimumValue = QVariant::Invalid;
        entry.maximumValue = QVariant::Invalid;
        entry.displayOrder = 99999999;
        entries["TrackColor"] = entry;
    }
            
    bool guiAvailable = true;
    #ifdef Q_OS_LINUX
    guiAvailable = 0 != getenv("DISPLAY");
    #endif
    if (guiAvailable) {
        settingsPage_ = new Widgets::DeclarativeSettingsPage(
                                Shared::actorCanonicalName(localizedModuleName(QLocale::Russian)),
                                mySettings(),
                                entries
                              );
        connect(settingsPage_, SIGNAL(settingsChanged(QStringList)), this, SLOT(handleSettingsChangedCppImplementation(QStringList)));
    }
    
    asyncRunThread_ = new GrasshopperAsyncRunThread(this, module_);
    QObject::connect(asyncRunThread_, SIGNAL(finished()),
                     this, SIGNAL(sync()));
    QObject::connect(module_, SIGNAL(notifyOnTemplateParametersChanged()),
                     this, SIGNAL(notifyOnTemplateParametersChanged()));
    
    return module_->initialize(a, b);
}

/* public */ bool GrasshopperPlugin::isGuiRequired() const
{
    return true;
}

/* public */ bool GrasshopperPlugin::isSafeToQuit()
{
    return module_->isSafeToQuit();
}

/* public slot */ void GrasshopperPlugin::loadActorData(QIODevice * source)
{
    if (module_) {
        module_->loadActorData(source);
    }
}

/* public */ QString GrasshopperPlugin::localizedModuleName(const QLocale::Language ) const
{
    // TODO non-Russian languages not implemented yet
    return QString::fromUtf8("Кузнечик");
}

/* public */ QString GrasshopperPlugin::mainIconName() const
{
    return QString::fromLatin1("grasshopper");
}

/* public */ QWidget* GrasshopperPlugin::mainWidget()
{
    return module_->mainWidget();
}

/* public */ QList<QMenu*> GrasshopperPlugin::moduleMenus() const
{
    return module_->moduleMenus();
}

/* protected */ void GrasshopperPlugin::msleep(unsigned long secs)
{
    //if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->amsleep(secs);
    //}
}

/* public */ void GrasshopperPlugin::notifyGuiReady()
{
    module_->handleGuiReady();
}

/* public */ QString GrasshopperPlugin::pultIconName() const
{
    return QString::fromLatin1("grasshopper-pult");
}

/* public */ QWidget* GrasshopperPlugin::pultWidget()
{
    return module_->pultWidget();
}

/* public */ void GrasshopperPlugin::reset()
{
    module_->reset();
}

/* public */ QVariant GrasshopperPlugin::result() const
{
    return result_;
}

/* public */ void GrasshopperPlugin::setAnimationEnabled(bool enabled)
{
    // The module might be not created at a time of call,
    // so check it propertly
    if (module_) {
        module_->setAnimationEnabled(enabled);
    }
}

/* public */ QWidget* GrasshopperPlugin::settingsEditorPage()
{
    return settingsPage_;
}

/* protected */ void GrasshopperPlugin::sleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->asleep(secs);
    }
}

/* public */ QVariantList GrasshopperPlugin::templateParameters() const
{
    if (module_) {
        return module_->templateParameters();
    }
    else {
        return defaultTemplateParameters();
    }
}

/* public */ void GrasshopperPlugin::terminateEvaluation()
{
    module_->terminateEvaluation();
}

/* public */ Shared::ActorInterface::TypeList GrasshopperPlugin::typeList() const
{
    Shared::ActorInterface::TypeList result;
    
    return result;
}

/* private */ void GrasshopperPlugin::updateSettings(const QStringList & keys)
{
    if (settingsPage_) {
        settingsPage_->setSettingsObject(mySettings());
    }
    if (module_) {
        module_->reloadSettings(mySettings(), keys);
    }
}

/* public */ QList<Shared::ActorInterface*> GrasshopperPlugin::usesList() const
{
    static const QList<Shared::ActorInterface*> empty = QList<Shared::ActorInterface*>();
    return empty;
}

/* protected */ void GrasshopperPlugin::usleep(unsigned long secs)
{
    if (QThread::currentThread()==asyncRunThread_) {
        asyncRunThread_->ausleep(secs);
    }
}



GrasshopperAsyncRunThread::GrasshopperAsyncRunThread(class GrasshopperPlugin* plugin, class GrasshopperModuleBase* module)
    : QThread(plugin)
    , index_(0)
    , args_(QVariantList())
    , plugin_(plugin)
    , module_(module)
{
}

/* public */ void GrasshopperAsyncRunThread::amsleep(unsigned long secs)
{
    msleep(secs);
}

/* public */ void GrasshopperAsyncRunThread::asleep(unsigned long secs)
{
    sleep(secs);
}

/* public */ void GrasshopperAsyncRunThread::ausleep(unsigned long secs)
{
    usleep(secs);
}

/* public */ void GrasshopperAsyncRunThread::init(quint32 index, const QVariantList & args)
{
    index_ = index;
    args_ = args;
}

/* private */ void GrasshopperAsyncRunThread::run()
{
    switch (index_) {
        case 0x0000: {
            /* go forward %1 */
            int distance = qvariant_cast<int>(args_[0]);
            module_->runGoForward(distance);
            plugin_->optResults_ << QVariant::Invalid;
            break;
        }
        case 0x0001: {
            /* go backward %2 */
            int distance = qvariant_cast<int>(args_[0]);
            module_->runGoBackward(distance);
            plugin_->optResults_ << QVariant::Invalid;
            break;
        }
        
        default: {
            plugin_->errorText_ = "Unknown method index";
        }
    }
}



} // namespace ActorGrasshopper
#if QT_VERSION < 0x050000
Q_EXPORT_PLUGIN(ActorGrasshopper::GrasshopperPlugin)
#endif
