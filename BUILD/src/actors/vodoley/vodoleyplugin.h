/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

#ifndef VODOLEYPLUGIN_H
#define VODOLEYPLUGIN_H

// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>
#include <kumir2-libs/widgets/declarativesettingspage.h>
#include <kumir2/actorinterface.h>

// Qt includes
#include <QObject>
#include <QtPlugin>
#include <QtCore>
#if QT_VERSION >= 0x050000
#   include <QtWidgets>
#else
#   include <QtGui>
#endif

namespace ActorVodoley {


class VodoleyPlugin
    : public ExtensionSystem::KPlugin
    , public Shared::ActorInterface
{

    friend class VodoleyAsyncRunThread;
    friend class VodoleyModuleBase;
    Q_OBJECT
#if QT_VERSION >= 0x050000
    Q_PLUGIN_METADATA(IID "kumir2.ActorVodoley" FILE "")
#endif
    Q_INTERFACES(Shared::ActorInterface)
        
public /* methods */:
    VodoleyPlugin();
    QVariantList algOptResults() const;
    QByteArray asciiModuleName() const;
    void connectSync(QObject* receiver, const char* method);
    QVariant customValueFromString(const QByteArray & , const QString & ) const;
    QString customValueToString(const QByteArray & , const QVariant & ) const;
    QVariantList defaultTemplateParameters() const;
    QString errorText() const;
    Shared::EvaluationStatus evaluate(quint32 index, const QVariantList & args);
    Shared::ActorInterface::FunctionList functionList() const;
    bool isGuiRequired() const;
    bool isSafeToQuit();
    QString localizedModuleName(const QLocale::Language ) const;
    QString mainIconName() const;
    QWidget* mainWidget();
    QList<QMenu*> moduleMenus() const;
    void notifyGuiReady();
    QString pultIconName() const;
    QWidget* pultWidget();
    void reset();
    QVariant result() const;
    void setAnimationEnabled(bool enabled);
    QWidget* settingsEditorPage();
    QVariantList templateParameters() const;
    void terminateEvaluation();
    Shared::ActorInterface::TypeList typeList() const;
    QList<Shared::ActorInterface*> usesList() const;
public Q_SLOTS:
    void loadActorData(QIODevice * source);
Q_SIGNALS:
    void sync();
    void asyncRun(quint32, const QVariantList &);
    void notifyOnTemplateParametersChanged();


    /* ========= CLASS PRIVATE ========= */
protected /* methods */:
    QList<ExtensionSystem::CommandLineParameter> acceptableCommandLineParameters() const;
    void changeGlobalState(ExtensionSystem::GlobalState old, ExtensionSystem::GlobalState current);
    void createPluginSpec();
    QString initialize(const QStringList &a, const ExtensionSystem::CommandLine &b);
    void msleep(unsigned long secs);
    void sleep(unsigned long secs);
    void usleep(unsigned long secs);
private /* methods */:
    void updateSettings(const QStringList & keys);

private Q_SLOTS:
    void asyncEvaluate(quint32 index, const QVariantList & args);
    void handleSettingsChangedCppImplementation(const QStringList & keys);
protected /* fields */:
    class VodoleyModuleBase* module_;
    class VodoleyAsyncRunThread* asyncRunThread_;
    class Widgets::DeclarativeSettingsPage* settingsPage_;
    QString errorText_;
    QVariant result_;
    QVariantList optResults_;
    ExtensionSystem::CommandLine commandLineParameters_;

private:
    template <typename T> inline static QVector<T> toVector1(const QVariant & v)
    {
        const QVariantList l = v.toList();
        QVector<T> result;
        result.resize(l.size());
        for (int i=0; i<l.size(); i++) {
            result[i] = qvariant_cast<T>(l[i]);
        }
        return result;
    }
    template <typename T> inline static QVector< QVector<T> > toVector2(const QVariant & v)
    {
        const QVariantList l = v.toList();
        QVector< QVector<T> > result;
        result.resize(l.size());
        for (int i=0; i<l.size(); i++) {
            const QVariantList ll = l[i].toList();
            result[i].resize(ll.size());
            for (int j=0; j<ll.size(); j++) {
                result[i][j] = qvariant_cast<T>(ll[j]);
            }
        }
        return result;
    }
    template <typename T> inline static QVector< QVector< QVector<T> > > toVector3(const QVariant & v)
    {
        const QVariantList l = v.toList();
        QVector< QVector< QVector<T> > > result;
        result.resize(l.size());
        for (int i=0; i<l.size(); i++) {
            const QVariantList ll = l[i].toList();
            result[i].resize(ll.size());
            for (int j=0; j<ll.size(); j++) {
                const QVariantList lll = ll[j].toList();
                result[i][j].resize(lll.size());
                for (int k=0; k<lll.size(); k++) {
                    result[i][j][k] = qvariant_cast<T>(lll[k]);
                }
            }
        }
        return result;
    }
        
};
        


class VodoleyAsyncRunThread
    : public QThread
{

public /* methods */:
    VodoleyAsyncRunThread(class VodoleyPlugin* plugin, class VodoleyModuleBase* module);
    void amsleep(unsigned long secs);
    void asleep(unsigned long secs);
    void ausleep(unsigned long secs);
    void init(quint32 index, const QVariantList & args);




    /* ========= CLASS PRIVATE ========= */

private /* methods */:
    void run();


protected /* fields */:
    quint32 index_;
    QVariantList args_;
    class VodoleyPlugin* plugin_;
    class VodoleyModuleBase* module_;

};
        

} // namespace ActorVodoley

#endif // VODOLEYPLUGIN_H
