/*
DO NOT EDIT THIS FILE!

This file is autogenerated from "--update" and will be replaced
every build time

*/

// Self includes
#include "vodoleymodulebase.h"
#include "vodoleyplugin.h"

// Kumir includes
#include <kumir2-libs/extensionsystem/kplugin.h>

// Qt includes
#include <QtCore>
#include <QtGui>

namespace ActorVodoley {

VodoleyModuleBase::VodoleyModuleBase(ExtensionSystem::KPlugin* parent)
    : QObject(parent)
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        static const QString currentLocaleName = QLocale().name();
        
        m_menuVodoley = new QMenu();
        if (currentLocaleName=="ru_RU") {
            m_menuVodoley->setTitle(QString::fromUtf8("Водолей"));
        }
        else {
            m_menuVodoley->setTitle(QString::fromLatin1("Vodoley"));
        }
        
        m_actionVodoleyLoadEnvironment = m_menuVodoley->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionVodoleyLoadEnvironment->setText(QString::fromUtf8("Загрузить задание..."));
        }
        else {
            m_actionVodoleyLoadEnvironment->setText(QString::fromLatin1("Load Environment..."));
        }
        
        m_actionVodoleyLoadRescent = m_menuVodoley->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionVodoleyLoadRescent->setText(QString::fromUtf8("Недавние задания"));
        }
        else {
            m_actionVodoleyLoadRescent->setText(QString::fromLatin1("Load Rescent..."));
        }
        
        m_actionVodoleyRevertEnvironment = m_menuVodoley->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionVodoleyRevertEnvironment->setText(QString::fromUtf8("Вернуть исходное задание"));
        }
        else {
            m_actionVodoleyRevertEnvironment->setText(QString::fromLatin1("Revert Environment"));
        }
        
        m_actionVodoleySaveEnvironment = m_menuVodoley->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionVodoleySaveEnvironment->setText(QString::fromUtf8("Сохранить..."));
        }
        else {
            m_actionVodoleySaveEnvironment->setText(QString::fromLatin1("Save Environment..."));
        }
        
        m_actionVodoleyNewEnvironment = m_menuVodoley->addAction("");
        if (currentLocaleName=="ru_RU") {
            m_actionVodoleyNewEnvironment->setText(QString::fromUtf8("Новое задание…"));
        }
        else {
            m_actionVodoleyNewEnvironment->setText(QString::fromLatin1("New Environment..."));
        }
        
        
    }
}

/* protected */ const ExtensionSystem::CommandLine& VodoleyModuleBase::commandLineParameters() const
{
    VodoleyPlugin * plugin = qobject_cast<VodoleyPlugin*>(parent());
    return plugin->commandLineParameters_;
}

/* public virtual */ void VodoleyModuleBase::handleGuiReady()
{
}

/* public virtual */ QString VodoleyModuleBase::initialize(const QStringList &configurationParameters, const ExtensionSystem::CommandLine & runtimeParameters)
{
    Q_UNUSED(configurationParameters);
    Q_UNUSED(runtimeParameters);

    // Return error text or an empty string on successfull  initialization
    return QString();
}

/* public virtual */ bool VodoleyModuleBase::isSafeToQuit()
{
    return true;
}

/* public virtual slot */ void VodoleyModuleBase::loadActorData(QIODevice * source)
{
    Q_UNUSED(source);  // By default do nothing

}



/* public */ QList<QMenu*> VodoleyModuleBase::moduleMenus() const
{
    bool hasGui = true;
#ifdef Q_OS_LINUX
    hasGui = getenv("DISPLAY")!=0;
#endif
    if (hasGui) {
        QList<QMenu*> result;
        result.push_back(m_menuVodoley);
        
        return result;
    }
    else {
        return QList<QMenu*>();
    }
}

/* protected */ void VodoleyModuleBase::msleep(unsigned long msecs)
{
    VodoleyPlugin* plugin = qobject_cast<VodoleyPlugin*>(parent());
    plugin->msleep(msecs);
}

/* public */ QDir VodoleyModuleBase::myResourcesDir() const
{
    VodoleyPlugin* plugin = qobject_cast<VodoleyPlugin*>(parent());
    return plugin->myResourcesDir();
}

/* public */ ExtensionSystem::SettingsPtr VodoleyModuleBase::mySettings() const
{
    VodoleyPlugin* plugin = qobject_cast<VodoleyPlugin*>(parent());
    return plugin->mySettings();
}





/* protected */ void VodoleyModuleBase::setError(const QString & errorText)
{
    VodoleyPlugin* plugin = qobject_cast<VodoleyPlugin*>(parent());
    plugin->errorText_ = errorText;
}

/* protected */ void VodoleyModuleBase::sleep(unsigned long secs)
{
    VodoleyPlugin* plugin = qobject_cast<VodoleyPlugin*>(parent());
    plugin->sleep(secs);
}

/* public virtual */ QVariantList VodoleyModuleBase::templateParameters() const
{
    VodoleyPlugin * plugin = qobject_cast<VodoleyPlugin*>(parent());
    return plugin->defaultTemplateParameters();
}

/* protected */ void VodoleyModuleBase::usleep(unsigned long usecs)
{
    VodoleyPlugin* plugin = qobject_cast<VodoleyPlugin*>(parent());
    plugin->usleep(usecs);
}



} // namespace ActorVodoley
